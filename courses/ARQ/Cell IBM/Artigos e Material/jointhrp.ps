%!PS-Adobe-3.0 EPSF-2.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - IEEEWP.DOC
%%BoundingBox: 18 17 597 776
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: 0
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
%%EndSetup
SS
0 0 25 22 804 1100 300 SM
32 0 0 33 33 0 0 0 29 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 2897 1785 (_________________________________________________________________________________________________________) 1785 SB
32 0 0 38 38 0 0 0 38 /Symbol font
300 2934 30 (\343) 30 SB
32 0 0 38 38 0 0 0 34 /Times-Roman /font4 ANSIFont font
330 2938 900 ( Copyright 1995 Apple Computer, Inc.  All rights reserved.) 900 SB
32 0 0 38 38 0 0 0 38 /Symbol font
300 2984 30 (\343) 30 SB
32 0 0 38 38 0 0 0 34 /Times-Roman /font4 ANSIFont font
330 2988 1271 ( Copyright 1995 International Business Machines Corporation.  All rights reserved.) 1271 SB
32 0 0 38 38 0 0 0 38 /Symbol font
300 3034 30 (\343) 30 SB
32 0 0 38 38 0 0 0 34 /Times-Roman /font4 ANSIFont font
330 3038 787 ( Copyright 1995 Motorola, Inc.  All rights reserved.) 787 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
567 286 389 (The PowerPC ) 389 SB
32 0 0 38 38 0 0 0 36 /Helvetica-Bold /font9 ANSIFont font
956 276 67 (TM ) 67 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
1023 286 810 (Hardware Reference Platform) 810 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 418 1588 (   Steve MacKenzie                                  David Tjon and Allan Steel                   Steve Bunch) 1588 SB
300 468 1607 (Apple Computer, Inc.                                   IBM Corporation                             Motorola, Inc.) 1607 SB
300 518 1571 (     Cupertino, CA                                            Austin, TX                                     Urbana, IL) 1571 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
300 750 233 (Abstract) 233 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 832 1765 (This paper discusses the development of the PowerPC hardware reference platform \(HRP\). The HRP is a) 1765 SB
300 882 1717 (system design architecture that allows a PowerPC-based computer designed to that architecture to run) 1717 SB
300 932 1663 (operating systems from Apple Computer, IBM, Motorola, and others. The goal of the HRP is to let) 1663 SB
300 982 1629 (customers choose computer hardware independently of choosing the software they will run on it.) 1629 SB
300 1082 1788 (The paper provides insights into the history, rationale, and design issues facing the developers of the HRP) 1788 SB
300 1132 1776 (architecture and its compliant hardware. It does not present the architecture or hardware design in detail,) 1776 SB
300 1182 1221 (because that information will be made available in other documentation.) 1221 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
300 1282 335 (Introduction) 335 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 1414 1771 (The PowerPC family of microprocessors, which is being jointly developed by Apple, IBM, and Motorola,) 1771 SB
300 1464 1788 (is the foundation for an established and rapidly expanding market for RISC-based hardware and software.) 1788 SB
300 1516 1167 (Apple Computer has shipped well over one million Power Macintosh) 1167 SB
32 0 0 42 42 0 0 0 42 /Symbol font
1467 1512 33 (\344) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1500 1516 585 ( computers since introducing them) 585 SB
300 1569 1788 (in March 1994. Companies such as Daystar, Pioneer, Power Computing, and Radius have also announced) 1788 SB
300 1619 1653 (Power Macintosh compatible systems. IBM intends to make major hardware and software product) 1653 SB
300 1669 1638 (announcements for a full line of PowerPC systems, complementing its successful PowerPC-based) 1638 SB
300 1719 1732 (workstation and server products. Motorola has recently introduced a broad range of desktop and server) 1732 SB
300 1769 1710 (systems. Other companies such as Bull, Canon, and FirePower have announced or shipped PowerPC-) 1710 SB
300 1819 1664 (based systems. PowerPC-based computers today outsell all other RISC-based computers combined.) 1664 SB
300 1921 1496 (The PowerPC systems shipped by Apple retain many legacy characteristics of Macintosh) 1496 SB
32 0 0 42 42 0 0 0 42 /Symbol font
1796 1917 33 (\344) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1829 1921 242 ( hardware and) 242 SB
300 1974 1644 (software. The PowerPC systems shipped by IBM, Motorola, and others provide the benefits of the) 1644 SB
300 2024 1778 (PowerPC architecture yet retain many legacy characteristics of Intel-based PC designs. Applications have) 1778 SB
300 2074 1793 (been written for both environments. However, the operating systems on which the applications run are not) 1793 SB
300 2124 1651 (compatible with the other type of hardware platform. This forces computer users to choose among) 1651 SB
300 2174 1745 (incompatible hardware configurations, instead of focusing on what applications they need to solve their) 1745 SB
300 2224 166 (problems.) 166 SB
300 2324 1679 (This incompatibility also causes hardware manufacturers and software developers to have to choose) 1679 SB
300 2374 1721 (platform families. Thus, PowerPC-based development is fragmented, and availability of hardware and) 1721 SB
300 2424 1011 (software is inhibited, limiting the options available to users.) 1011 SB
300 2524 1768 (To correct these problems facing customers and developers, Apple, IBM, and Motorola looked at various) 1768 SB
300 2574 1798 (ways of combining the two hardware architectures into a common system architecture. In November 1994,) 1798 SB
300 2624 1699 (the three companies announced agreement to develop a common hardware architecture that supports) 1699 SB
300 2674 1772 (operating systems ported to the PowerPC family of processors. With the introduction of systems based on) 1772 SB
300 2724 1796 (the new architecture, software vendors can anticipate a large, compatible hardware base and are motivated) 1796 SB
300 2774 919 (to create or modify their code for PowerPC processors.) 919 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (2) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
300 236 1580 (The three companies agreed to create a hardware reference platform \(HRP\) specification. The) 1580 SB
300 286 1636 (specification defines an architecture that describes the hardware and firmware interfaces which a) 1636 SB
300 336 1775 (compliant platform must make visible to software. The specification emphasizes the programming model) 1775 SB
300 386 1781 (of a compliant system. As an architecture, it is precise enough to assure software compatibility for several) 1781 SB
300 436 1732 (operating environments, broad enough to cover a range of systems from portables through servers, and) 1732 SB
300 486 1758 (flexible enough to evolve with technology and market demands. The specification will be released to the) 1758 SB
300 536 453 (industry in the near future.) 453 SB
300 636 1799 (Under the initial HRP agreement, Apple is responsible for porting Mac OS to the HRP, IBM is responsible) 1799 SB
300 686 267 (for porting AIX) 267 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
567 681 40 (TM) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
607 686 170 ( and OS/2) 170 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
777 681 40 (TM) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
817 686 1146 ( for PowerPC, and Motorola is responsible for porting Windows NT) 1146 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
1963 681 40 (TM) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
2003 686 11 (.) 11 SB
300 736 958 (Sunsoft and Novell have announced plans to port Solaris) 958 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
1258 731 40 (TM) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1298 736 225 ( and Netware) 225 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
1523 731 40 (TM) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1563 736 460 ( as well. The goal is to port) 460 SB
300 786 566 (these operating systems to run in ) 566 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font6 ANSIFont font
866 786 104 (native) 104 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
970 786 11 ( ) 11 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font6 ANSIFont font
981 786 200 (binary form) 200 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1181 786 720 ( on any platform that conforms to the HRP) 720 SB
300 836 1766 (architecture. Additionally, the HRP architecture is designed to allow applications that run today on these) 1766 SB
300 886 1034 (operating systems to run unchanged from their existing code.) 1034 SB
300 986 1611 (The three companies also agreed to develop an initial hardware implementation to facilitate the) 1611 SB
300 1036 1782 (development of other compliant systems and to encourage an industry infrastructure that will offer widely) 1782 SB
300 1086 1295 (available components and subsystems for computers built to the architecture.) 1295 SB
300 1186 1648 (A prime objective of the HRP specification and its initial hardware implementation is to create an) 1648 SB
300 1236 1699 (environment that lets other chip and system vendors build components and HRP systems rapidly and) 1699 SB
300 1286 1766 (inexpensively. Whenever possible, industry-standard, commodity-priced components and subsystems are) 1766 SB
300 1336 1695 (used or encouraged. Where unique function or partitioning is not readily available, Apple, IBM, and) 1695 SB
300 1386 1786 (Motorola are collectively providing major ASICs for this implementation. The companies plan to produce) 1786 SB
300 1436 1689 (specifications for these chips that will be made available to the merchant market. Note that an HRP-) 1689 SB
300 1486 852 (compliant system does not have to use these chips.) 852 SB
300 1586 1756 (The specific initial implementation from Apple, IBM, and Motorola is described later in this paper. The) 1756 SB
300 1636 1792 (final version of this design, as well as the HRP architecture itself, may have different characteristics, since) 1792 SB
300 1686 1777 (it is still under development. It is expected that other compliant systems will be produced by Apple, IBM,) 1777 SB
300 1736 470 (Motorola, or other partners.) 470 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
300 1886 811 (Current Product Environment) 811 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 2018 1663 (To gain an even broader acceptance of PowerPC-based designs among hardware vendors, software) 1663 SB
300 2068 1798 (vendors, and system users, Apple, IBM, and Motorola have a strong desire to make it easy to run multiple,) 1798 SB
300 2118 1677 (binary compatible operating systems on PowerPC platforms, particularly in the personal computing) 1677 SB
300 2168 1768 (desktop marketplace. The companies originally took different approaches to accomplishing this common) 1768 SB
300 2218 83 (goal.) 83 SB
300 2318 1725 (On one hand, IBM\222s personal computing customer base was served by machines built around the Intel) 1725 SB
300 2368 1632 (processor architecture. IBM wanted a new architecture to exploit the capabilities of the PowerPC) 1632 SB
300 2418 1785 (processor in order to expand solutions for customers. This architecture was designed to coexist with Intel-) 1785 SB
300 2468 1719 (based PC\222s. To achieve this, IBM created an open industry standard for PowerPC-based systems. This) 1719 SB
300 2518 833 (standard, called the PowerPC Reference Platform) 833 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
1133 2513 40 (TM) 40 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1173 2518 893 (, provided new levels of performance and function in) 893 SB
300 2568 1693 (the PC marketplace while utilizing the existing PC industry infrastructure for low-cost, high volume) 1693 SB
300 2618 484 (components and subsystems.) 484 SB
300 2718 1667 (On the other hand, Apple\222s customer base used machines built around Motorola\222s 68000 processor) 1667 SB
300 2768 1688 (architecture. Since PowerPC would replace the 68000 as Motorola\222s flagship processor architecture,) 1688 SB
300 2818 1778 (Apple\222s first priority was to provide its customers with a seamless transition to the PowerPC architecture.) 1778 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (3) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
300 236 1768 (The next sections give an overview of the two pertinent hardware architectures currently in the PowerPC) 1768 SB
300 286 1668 (desktop marketplace, namely the PowerPC Reference Platform and the Power Macintosh. They are) 1668 SB
300 336 1033 (described here to give historical background to the new HRP.) 1033 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 436 797 (The PowerPC Reference Platform) 797 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 567 1613 (The PowerPC Reference Platform Specification version 1.1 released in October 1994 is an open) 1613 SB
300 617 1774 (specification for building PowerPC-based computer systems. It is sponsored by IBM, Motorola, and other) 1774 SB
300 667 1666 (companies. There are two important aspects of this specification. First, the specification provides a) 1666 SB
300 717 1783 (description of the devices, interfaces, and data formats required to design and build a compliant computer) 1783 SB
300 767 1663 (system. It describes methods to abstract hardware details from operating system software. Multiple) 1663 SB
300 817 955 (operating systems can then run on a compliant platform.) 955 SB
300 917 1696 (Second, the specification provides a reference implementation that describes in detail the design of a) 1696 SB
300 967 1718 (compliant system, to encourage other system vendors to build and market PowerPC-based systems.  A) 1718 SB
300 1017 1708 (reference implementation is a fully disclosed design with known operating system support. Reference) 1708 SB
300 1067 1768 (implementations allow vendors to build hardware-compatible systems while operating systems move to a) 1768 SB
300 1117 1741 (hardware abstraction model. The reference implementation described in the October 1994 specification) 1741 SB
300 1167 1276 (runs ported versions of AIX, OS/2 for PowerPC, Solaris, and Windows NT.) 1276 SB
300 1267 1435 (The processor complex in the PowerPC Reference Platform consists of the following:) 1435 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1315 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1319 367 (A PowerPC processor) 367 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1367 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1371 1660 (A local bus upgrade socket which accommodates an external cache card, a processor upgrade, or a) 1660 SB
375 1421 400 (combination of the two.) 400 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1469 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1473 1493 (The PCI bridge/memory controller that supports big-endian and little-endian operations.) 1493 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1521 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1525 274 (System Memory) 274 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1573 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1577 184 (Boot ROM) 184 SB
300 1677 1073 (The I/O complex supports PCI and ISA devices and consists of:) 1073 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1725 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1729 584 (2 PCI slots \(one used for graphics\)) 584 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1777 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1781 186 (3 ISA slots) 186 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1829 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1833 1645 (A PCI-attached SCSI controller. However, the architecture does not mandate the use of SCSI or a) 1645 SB
375 1883 449 (particular SCSI controller.) 449 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1931 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1935 1714 (An I/O subsystem consisting of an industry-standard PCI-to-ISA bridge \(System I/O\) and a Super I/O) 1714 SB
375 1985 1717 (chip \(which provides many of the typical PC I/O functions\). Again, the particular selection of chips is) 1717 SB
375 2035 241 (not mandated.) 241 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 2083 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 2087 1655 (Business audio subsystem. As above, the particular chip is not mandated, but an audio function is.) 1655 SB
300 2187 1683 (An important feature of this design is that except for devices attached to the processor local bus, the) 1683 SB
300 2237 1752 (system uses PC industry-standard components. It was a goal of the specification to leverage PC industry) 1752 SB
300 2287 1733 (standard devices where appropriate. This allows support for devices and peripherals widely used in the) 1733 SB
300 2337 1684 (marketplace, and takes advantage of the declining cost for these components driven by PC volumes.) 1684 SB
300 2437 1750 (IBM intends to announce a complete family of PowerPC-based systems that use the PowerPC Reference) 1750 SB
300 2487 1757 (Platform architecture. Because that architecture allows flexibility in hardware design, these systems will) 1757 SB
300 2537 1778 (have different implementation characteristics but will run the ported versions of AIX, OS/2 for PowerPC,) 1778 SB
300 2587 1544 (Solaris, and Windows NT, as well as Intel x86 code \(using software emulation technology\).) 1544 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 2687 414 (Power Macintosh) 414 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 2809 1690 (In March 1994, Apple started using the PowerPC microprocessor in its Macintosh family of desktop) 1690 SB
300 2859 1762 (computers, replacing the Motorola 68000 series of processors. Built-in emulation software lets programs) 1762 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (4) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
300 236 1615 (compiled to the 68LC040 instruction set continue to run in the PowerPC environment. The first) 1615 SB
300 286 1784 (generation of Power Macintosh products use a version of the PowerPC bus \(called the Apple RISC bus, or) 1784 SB
300 336 984 (ARBus\) to connect built-in I/O devices and use the NuBus) 984 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
1284 331 54 (TM  ) 54 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1338 336 747 (to connect plug-in expansion cards.  Several) 747 SB
300 386 1752 (configurations have been introduced with PowerPC 601 and 603 processors running at speeds up to 120) 1752 SB
300 436 1691 (MHz. These computers run a PowerPC version of Mac OS operating system, with provision for both) 1691 SB
300 486 1775 (software emulation and hardware coprocessing to run software compiled to the instruction set of the Intel) 1775 SB
300 536 423 (x86 family of processors.) 423 SB
300 636 1763 (The second generation of Power Macintosh desktop products, planned to be introduced this summer, use) 1763 SB
300 686 1695 (the Peripheral Component Interconnect \(PCI\) bus to connect both internal I/O ASICs and expansion) 1695 SB
300 736 1765 (cards. They also include built-in firmware, called Open Firmware, that implements IEEE Standard 1275) 1765 SB
300 786 1742 (for Boot \(Initialization, Configuration\) Firmware. They include PowerPC 601, 603, and 604 processors) 1742 SB
300 836 1529 (and continue to support both Mac OS and software compiled to the Intel x86 environment.) 1529 SB
300 936 1365 (The second generation Power Macintosh products include these general features:) 1365 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 984 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 988 1692 (Use of the PowerPC family for main system processing. Motorola\222s 68LC040 is supported through a) 1692 SB
375 1038 1684 (built-in emulation system. Specific configurations may also include x86-based processors to support) 1684 SB
375 1088 326 (DOS and Windows) 326 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
701 1083 47 (TM ) 47 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
748 1088 215 (applications.) 215 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1136 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1140 1684 (Use of the PCI bus to support all I/O and system expansion. Other buses \(such as NuBus, SCSI, and) 1684 SB
375 1190 1272 (IDE\) are implemented by means of bridge ASICs connected to the PCI bus.) 1272 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1238 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1242 1604 (System startup through Open Firmware. While Mac OS continues to be the principal operating) 1604 SB
375 1292 1608 (system for Power Macintosh, Open Firmware lets other operating systems that are ported to the) 1608 SB
375 1342 1647 (PowerPC take control of the computer. Open Firmware also allows PCI expansion cards made for) 1647 SB
375 1392 994 (traditional PCs to function in Power Macintosh computers.) 994 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1440 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1444 1654 (Processor bus coherency. Memory systems connected directly to the PowerPC bus, including main) 1654 SB
375 1494 1128 (RAM and all levels of cache, belong to a single coherency domain.) 1128 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1542 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1546 1652 (Support for both big-endian and little-endian addressing. Besides the support for both modes built) 1652 SB
375 1596 1725 (into the PowerPC processor, storage subsystems such as frame buffers are accessible through both big-) 1725 SB
375 1646 581 (endian and little-endian apertures.) 581 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1694 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1698 925 (Support for native interrupts and native device drivers.) 925 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
300 1798 237 (The New) 237 SB
32 0 0 58 58 0 0 0 53 /Helvetica-BoldOblique /font11 ANSIFont font
537 1798 16 ( ) 16 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
553 1798 810 (Hardware Reference Platform) 810 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 1930 1754 (The HRP is a new, unique architecture that combines elements of both the PowerPC Reference Platform) 1754 SB
300 1980 1790 (architecture and the Power Macintosh architecture. It is a system design architecture that allows hardware) 1790 SB
300 2030 1790 (developers to build computers that will run ported versions of AIX, Mac OS, Netware, OS/2 for PowerPC,) 1790 SB
300 2080 1720 (Solaris, and Windows NT. These are referred to as the six native operating systems. As they do today,) 1720 SB
300 2130 1730 (DOS/Windows programs written in Intel x86 code can also run on these systems through emulation or) 1730 SB
300 2180 397 (hardware coprocessing.) 397 SB
300 2280 1612 (As an architecture it defines the hardware and firmware interfaces, data formats, and minimum) 1612 SB
300 2330 1730 (functionality that software expects to see in a hardware implementation. With this information, a third) 1730 SB
300 2380 1710 (party can design a computer that performs the same functions and runs the same system software and) 1710 SB
300 2430 1776 (applications as a machine produced by Apple, IBM, or Motorola. The discussion for the rest of this paper) 1776 SB
300 2480 1760 (will focus on both the HRP architecture and an initial, or reference, implementation of it currently being) 1760 SB
300 2530 693 (developed by Apple, IBM, and Motorola.) 693 SB
300 2630 63 (An ) 63 SB
32 0 0 42 42 0 0 0 38 /Times-Italic /font6 ANSIFont font
363 2630 263 (implementation) 263 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
626 2630 1378 ( of this architecture must provide for the address maps and register mappings and) 1378 SB
300 2680 1774 (definitions required by all operating systems that run on that HRP system. It should also support as much) 1774 SB
300 2730 1478 (common I/O equipment as possible, consistent with cost and size targets for the system.) 1478 SB
300 2830 1664 (One of the goals of the developers of the HRP was to minimize the trauma to the various operating) 1664 SB
300 2880 1773 (systems of having to support new functions from other environments. Several cases had to be considered:) 1773 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (5) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 234 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 238 1638 (Unique architectural features: a company had a function unique to its native environment \(Power) 1638 SB
375 288 1719 (Macintosh or PowerPC Reference Platform\). For example, the Apple Desktop Bus \(ADB\) is unique to) 1719 SB
375 338 1709 (the Power Macintosh environment, while the 8042 keyboard interface is used in the PC environment.) 1709 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 386 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 390 1598 (Implementation: a company had its own implementation of a common function, such as audio.) 1598 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 438 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 442 1627 (Growth and evolution: all companies agreed to extend HRP to include new or better functions or) 1627 SB
375 492 504 (implementations of functions.) 504 SB
300 592 1773 (In the first case, deciding whether to include a function in the HRP architecture was based on whether its) 1773 SB
300 642 1756 (function would be useful in the HRP environment. That is, would customers still expect or want it? This) 1756 SB
300 692 1788 (was particularly true in the I/O area, where, for example, there are different mouse/keyboard and different) 1788 SB
300 742 1745 (serial port architectures between the original PowerPC Reference Platform and Power Macintosh. Also,) 1745 SB
300 792 1690 (PowerPC Reference Platform systems support plug-in ISA adapters, which do not exist in the Power) 1690 SB
300 842 1772 (Macintosh architecture. To provide broad compatibility, the HRP architecture specifies a minimum set of) 1772 SB
300 892 1736 (required functions that supports key features from both environments. In the case of I/O, this means an) 1736 SB
300 942 1685 (HRP platform will support I/O from both the Power Macintosh and the original PowerPC Reference) 1685 SB
300 992 399 (Platform environments.) 399 SB
300 1092 1747 (In the second case, factors such as projected market requirements and product cost helped decide which) 1747 SB
300 1142 1781 (implementation of a function to include in the initial HRP system design. Examples of common functions) 1781 SB
300 1192 1744 (for which implementation decisions had to be made include the audio subsystem, the storage subsystem) 1744 SB
300 1242 1693 (\(hard disk, floppy, CD-ROM\), and the graphics subsystem. The HRP architecture generally does not) 1693 SB
300 1292 1754 (mandate which particular implementation of a subsystem is required, but it does provide mechanisms to) 1754 SB
300 1342 1762 (maximize compatibility. For example, IDE or SCSI interfaces are both acceptable for hard disk and CD-) 1762 SB
300 1392 1630 (ROM, and Open Firmware and device drivers will make them compatible in an HRP system. An) 1630 SB
300 1442 1728 (implementation decision was usually based on the total effort, both hardware and software, required to) 1728 SB
300 1492 1797 (develop and build a particular implementation. Thus, all other factors being equal, an implementation was) 1797 SB
300 1542 1758 (chosen to minimize the porting effort of the majority of operating systems that are planned to run on the) 1758 SB
300 1592 1205 (HRP. That porting effort usually consists of writing new device drivers.) 1205 SB
300 1692 1773 (In the third case, architecture decisions will be based on market requirements and industry standards and) 1773 SB
300 1742 1639 (trends. Implementation decisions will also consider schedule and cost. As technology and market) 1639 SB
300 1792 1721 (requirements evolve over time, the HRP can change to include these new functions. For example, new) 1721 SB
300 1842 1708 (infra-red \(IR\) technology for wireless communication or new serial bus standards can be added to the) 1708 SB
300 1892 1011 (HRP. Emerging multimedia standards are another example.) 1011 SB
300 1992 1612 (It should be noted that the inclusion of the PCI bus architecture in the second-generation Power) 1612 SB
300 2042 1732 (Macintosh computers was a big step in helping Apple, IBM, and Motorola complete the definition of a) 1732 SB
300 2092 1792 (common architecture and implementation. The current HRP architecture specifies PCI headers for various) 1792 SB
300 2142 1653 (functions in an HRP system and could someday be updated to include other bus architectures. The) 1653 SB
300 2192 1612 (architecture defines how operating systems are informed of the presence of other bus interfaces.) 1612 SB
300 2292 1769 (The HRP architecture also specifies the use of the IEEE Standard 1275 for Open Firmware, a technology) 1769 SB
300 2342 1780 (that makes the computer\222s hardware configuration process independent of any operating system. The role) 1780 SB
300 2392 1275 (of Open Firmware in the HRP environment is discussed later in this article.) 1275 SB
300 2492 1663 (The HRP architecture specification is meant to be an open, industry-standard architecture that will) 1663 SB
300 2542 1164 (facilitate the rapid growth of PowerPC-based hardware and software.) 1164 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 2692 634 (What the HRP offers users) 634 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 2814 1653 (The HRP offers computer users a much more flexible operating environment. They can now buy a) 1653 SB
300 2864 1747 (computer based on the problems they want to solve, not based on the computer\222s hardware architecture.) 1747 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (6) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
300 236 1637 (The creators of the HRP believe that software, from power-on self-test \(POST\) and diagnostics to) 1637 SB
300 286 1786 (operating systems and applications, drives the usability and acceptance of a computer system. A computer) 1786 SB
300 336 1697 (user judges a computer system by its user environment, responsiveness, functionality, and reliability.) 1697 SB
300 386 1776 (System software controls these attributes by leveraging the hardware features and performance to provide) 1776 SB
300 436 387 (a total system solution.) 387 SB
300 536 1693 (All the native operating systems ported to the HRP provide users with their traditional strengths and) 1693 SB
300 586 1787 (features. On a single hardware platform a user can now experience superior ease of use and installation of) 1787 SB
300 636 1717 (hardware and software, install many industry-standard applications and hardware adapters, and enjoy) 1717 SB
300 686 508 (enhanced networking options.) 508 SB
300 786 1673 (A customer can buy an HRP platform and preserve his or her investment in I/O peripherals such as) 1673 SB
300 836 1745 (keyboards, displays, printers, telecommunications, etc. As the industry standardizes on HRP, customers) 1745 SB
300 886 1088 (will have a wider choice of peripherals and connectivity options.) 1088 SB
300 986 1648 (A fundamental goal of the HRP specification is that existing applications that run today on Power) 1648 SB
300 1036 1767 (Macintosh and PowerPC Reference Platform systems will run unchanged on an HRP platform. Thus, the) 1767 SB
300 1086 833 (customer\222s software investment is also preserved.) 833 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
300 1236 731 (Initial HRP Implementation) 731 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 1368 1723 (This section presents a description of the hardware elements in the initial implementation of the HRP.) 1723 SB
300 1418 1765 (Note that this is only one example of a system design that complies with the HRP architecture. It is not a) 1765 SB
300 1468 1780 (definition of the architecture, and other implementations may be significantly different. The design of the) 1780 SB
300 1518 1533 (initial implementation is still under development and can change from that described here.) 1533 SB
300 1618 1794 (Detailed information on the initial hardware design will be released by the three companies at a later date.) 1794 SB
300 1668 1749 (The first customer shipments of compliant hardware are planned to be made in the second half of 1996.) 1749 SB
300 1768 842 (A block diagram of the initial system is shown in ) 842 SB
1142 1768 142 (Figure 1) 142 SB
1284 1768 154 ( on page ) 154 SB
1438 1768 21 (8) 21 SB
1459 1768 22 ( .) 22 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 1918 245 (Processor) 245 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 1990 1693 (The processor is a PowerPC microprocessor. In this implementation it will be the latest model of the) 1693 SB
300 2040 1735 (PowerPC 604. It has a 32-bit address bus, providing addressability up to 4 GB. It has a 64-bit data bus.) 1735 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 2140 584 (System memory \(DRAM\)) 584 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 2212 1783 (Minimum memory size is 8 MB. Design options are being explored to try to achieve a maximum memory) 1783 SB
300 2262 1783 (size of 1 GB. 3.3 volt asynchronous DRAMs are planned to be used. The data path is 64 bits with either 8) 1783 SB
300 2312 665 (bits of parity, or ECC, or no protection.) 665 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 2412 435 (Level 2 \(L2\) cache) 435 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 2484 1695 (This implementation supports up to a 1 MB of L2 cache. It has a 64-bit data path with optional 8-bit) 1695 SB
300 2534 1756 (parity, attached to the processor bus in a \223lookaside\224 configuration. \223Lookaside\224 means that both the L2) 1756 SB
300 2584 1768 (cache and the memory controller decode CPU addresses in parallel. The L2 cache can be used in either a) 1768 SB
300 2634 574 (write-through or copy-back mode.) 574 SB
300 2734 1778 (Industry standard cache memory chips will be used. Initial versions of the HRP reference implementation) 1778 SB
300 2784 1542 (will use asynchronous SRAM. Other versions can use burst SRAM for higher performance.) 1542 SB
300 2884 1799 (The L2 data and tag SRAMs will be on a card, mounted on a 182-pin ELF connector to simplify upgrades.) 1799 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (7) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
300 236 1767 (The card supports both 5 V and 3.3 V components. The motherboard contains 5 V-tolerant 3.3 V buffers) 1767 SB
300 286 1767 (for the data SRAM outputs. The tag SRAMs have 3.3 V drivers. The card will also contain an EEPROM) 1767 SB
300 336 1661 (with a serial interface, which will contain presence-detect and other L2 configuration information.) 1661 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 486 623 (Read-Only Memory \(ROM\)) 623 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 608 1790 (The HRP architecture specifies a region for ROM address space. In the initial implementation it is located) 1790 SB
300 658 747 (in the top 16 MB of the 4 GB address space.) 747 SB
300 758 1731 (The OS ROM is an optional, socketable ROM which is present if the system runs Mac OS. It is 64 bits) 1731 SB
300 808 488 (wide and up to 4 MB in size.) 488 SB
300 908 1729 (The system ROM contains initial boot code, Power-On Self-Test \(POST\) code, system Open Firmware) 1729 SB
300 958 1784 (code, diagnostics, and other code unique to the hardware configuration in the system. It is 8 bits wide and) 1784 SB
300 1008 953 (up to 1 MB in size. It is implemented using Flash ROM.) 953 SB
300 1108 1760 (Both ROMs are addressed in the top 16 MB of the 4 GB address space. The ROMs do not support parity) 1760 SB
300 1158 1452 (or ECC. They are currently 5 V parts, and the use of 3.3 V parts is being investigated.) 1452 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 1308 814 (Memory Controller and PCI bridge) 814 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 1380 1720 (The memory controller and PCI bridge chip in the initial implementation is a follow-on to an existing) 1720 SB
300 1430 1796 (Motorola part, MPC105 Eagle. This chip is the interface between the processor bus and the PCI bus and is) 1796 SB
300 1480 1776 (also the controller for the memory, second level cache \(L2\), and ROM \(processor bus\). The processor bus) 1776 SB
300 1530 1751 (interface is 64 data bits and 32 address bits. The PCI interface is 32 data/address bits. PCI bus speeds of) 1751 SB
300 1580 1761 (up to 33 MHz are supported. The chip uses 3.3 volts. The new functions this ASIC supports for the HRP) 1761 SB
300 1630 136 (include:) 136 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1678 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1682 1678 (A new address map compliant with the HRP architecture. Some legacy address maps from previous) 1678 SB
375 1732 1103 (architectures may be supported to allow software time to migrate.) 1103 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1780 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1784 1598 (ECC for system memory \(DRAM\). Controls and checking/generation for a SEC/DED code are) 1598 SB
375 1834 359 (provided on the chip.) 359 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1882 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1886 1328 (ROM controls to handle the two types of ROM present in this implementation.) 1328 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1934 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1938 783 (Miscellaneous other functional enhancements.) 783 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (8) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
%MSEPS Preamble -294 -143 32 323 0 0 325 467	/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 -294 def /pp_by1 -143 def /pp_bx2 32 def /pp_by2 323 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1799 2476 314 259 CB
1798 2475 314 259 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (Sandee Karr) (Apple Computer, Inc.)%%Title: (HRP-001.IBM eps)%%CreationDate: (5/3/95) (10:58 AM)%%BoundingBox: -294 -143 32 323%%HiResBoundingBox: -293.599 -143.5305 30.5123 323.2942%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%+ Helvetica-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -96.6667 -4.6667 -96.6667 -4.6667%AI3_TileBox: -367.6667 -374.6667 184.3333 355.3333%AI3_DocumentPreview: PC_TIFF%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 1 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -396.6667 175.3333 2 1147 839 58 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helvetica%%IncludeFont: Helvetica-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold[/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4416.6667 4315.3333 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4416.6667 4315.3333 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4416.6667 4315.3333 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 AuU0 R0 G800 Ar2 J 0 j 2.5 w 4 M []0 d%AI3_Note:0 D-19.252 255.4036 m-51.752 255.4036 l-51.752 304.0702 lS-259.6823 289.4037 m-259.6823 2.9037 l24.9843 2.9037 lS6.3177 304.0986 m-167.3353 304.0986 lS-176.6823 76.7236 m-268.3353 76.7236 lS-104.3353 236.7369 m-104.3353 303.4037 lS-203.7103 139.7369 m-203.7103 173.1227 lS1 Ap0 O1 g0 J 0.5 w30.2623 294.7317 m30.2623 322.9192 L-7.7377 322.9192 L-7.7377 294.7317 L30.2623 294.7317 Lb0 To1 0 0 1 10.651 311.2061 0 TpTP-9.3312 0 Td0 Tr0 g1 w/_Helvetica 8.001 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq9 0 Tl0 Tc0 Tw(ROM\r) Tx -5.9988 -9 Td(\(system\)) Tx (\r) TX TO1 g0 R0 G0.5 w17.0123 221.237 m17.0123 288.4036 L-7.7377 288.4036 L-7.7377 221.237 L17.0123 221.237 Lb0 To1 0 0 1 3.9843 260.737 0 TpTP-9.3312 0 Td0 Tr0 g1 w(ROM\r) Tx 0.8888 -9 Td(\(OS\)) Tx (\r) TX TO1 g0 R0 G0.5 w-87.071 272.0702 m-87.071 289.1168 L-119.071 289.1168 L-119.071 272.0702 L-87.071 272.0702 Lb0 To1 0 0 1 -103.6823 277.4037 0 TpTP-10.6703 0 Td0 Tr0 g1 w(Buffer) Tx (\r) TX TOu0 Ap1 g0 R0 G2 J 0.5 w 10 M3.651 80.5972 m5.0209 80.5972 6.1316 81.7079 6.1316 83.0778 C6.1316 83.0778 L6.1316 84.4477 5.0209 85.5584 3.651 85.5584 C-4.4039 85.5584 L-5.7738 85.5584 -6.8845 84.4477 -6.8845 83.0778 C-6.8845 83.0778 L-6.8845 81.7079 -5.7738 80.5972 -4.4039 80.5972 C3.651 80.5972 LbU2.5 w 4 M-105.6823 260.0986 m-257.377 260.0986 lS-258.3698 305.9945 mS-258.9463 77.0702 mS1 Ap0 O1 g0 J 0.5 w-232.2377 282.0361 m-232.2377 323.0442 L-283.349 323.0442 L-283.349 282.0361 L-232.2377 282.0361 Lb0 To1 0 0 1 -258.349 307.0153 0 TpTP-16.8917 0 Td0 Tr0 g1 w(PowerPC\r) Tx -0.6671 -9 Td(processor) Tx (\r) TX TO1 g0 R0 G0.5 w-70.8627 206.3827 m-70.8627 227.7658 L-137.7657 227.7658 L-137.7657 206.3827 L-70.8627 206.3827 Lb0 To1 0 0 1 -103.6823 215.4037 0 TpTP-16.2315 0 Td0 Tr0 g1 w(L2 cache) Tx (\r) TX TO1 g0 R0 G0.5 w-129.9044 287.0361 m-129.9044 323.0442 L-181.0157 323.0442 L-181.0157 287.0361 L-129.9044 287.0361 Lb0 To1 0 0 1 -156.0157 312.0153 0 TpTP-13.3356 0 Td0 Tr0 g1 w(System\r) Tx -1.1066 -9 Td(memory\r) Tx 0.0039 -9 Td(\(DRAM\)) Tx (\r) TX TO1 g0 R0 G0.5 w-177.571 127.7577 m-177.571 160.7658 L-228.6823 160.7658 L-228.6823 127.7577 L-177.571 127.7577 Lb0 To1 0 0 1 -203.6823 142.7369 0 TpTP-15.1181 0 Td0 Tr0 g1 w(Ethernet) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w-228.9811 -31.638 m-228.9811 1.7478 lS1 Ap0 O1 g0 J 0.5 w-199.8419 -49.9297 m-199.8419 -10.6091 L-255.9532 -10.6091 L-255.9532 -49.9297 L-199.8419 -49.9297 Lb0 To1 0 0 1 -228.9532 -19.638 0 TpTP-10.2278 0 Td0 Tr0 g1 w(Audio\r) Tx 10.2278 -7.1 Td/_Helvetica 6.1 Tf0 0 Tl(\r) Tx -24.0108 -9 Td/_Helvetica 8.001 Tf9 0 Tl(SoundBlaster\r) Tx 4.6725 -9 Td(compatible) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w-166.3353 -118.9505 m-166.3353 1.7478 lS-109.6478 -31.638 m-109.6478 1.7478 lS1 Ap0 O1 g0 J 0.5 w-87.5085 -44.9297 m-87.5085 -10.6091 L-129.6198 -10.6091 L-129.6198 -44.9297 L-87.5085 -44.9297 Lb0 To1 0 0 1 -109.6198 -29.9713 0 TpTP-14.4442 0 Td0 Tr0 g1 w(NVRAM) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w-50.2728 -31.638 m-50.2728 1.7478 lS1 Ap0 O1 g0 J 0.5 w-28.1335 -44.9297 m-28.1335 -10.6091 L-70.2448 -10.6091 L-70.2448 -44.9297 L-28.1335 -44.9297 Lb0 To1 0 0 1 -50.2448 -23.638 0 TpTP-11.3354 0 Td0 Tr0 g1 w(Power\r) Tx -4.4468 -9 Td(manager) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w-135.002 139.7369 m-135.002 173.1227 lS1 Ap0 O1 g0 J 0.5 w-108.8627 127.7577 m-108.8627 160.7658 L-159.974 160.7658 L-159.974 127.7577 L-108.8627 127.7577 Lb0 To1 0 0 1 -134.974 147.7369 0 TpTP-16.003 0 Td0 Tr0 g1 w(Graphics\r) Tx -7.3339 -9 Td(\(accelerated\)) Tx (\r) TX TO0 To1 0 0 1 -189.6823 265.7369 0 TpTP-33.7864 0 Td0 Tr(PowerPC local bus) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w26.0052 174.4319 m-257.377 174.4319 lS0 To1 0 0 1 -251.349 180.0702 0 TpTP0 Tr0 O0 g0 J 1 w0 Ta(PCI \(32-bit\)) Tx (\r) TX TO0 To1 0 0 1 -251.349 9.0703 0 TpTP0 Tr(ISA \(16-bit\)) Tx (\r) TX TO0 To1 0 0 1 -156.6823 102.0702 0 TpTP-21.3396 0 Td0 Tr1 Ta(IDE devices) Tx (\r) TX TO0 To1 0 0 1 8.9843 87.0702 0 TpTP0 Tr0 Ta(SCC) Tx (\r) TX TO0 To1 0 0 1 8.9843 62.4037 0 TpTP0 Tr(SCSI) Tx (\r) TX TO0 To1 0 0 1 8.9843 50.4037 0 TpTP0 Tr(ADB) Tx (\r) TX TO0 To1 0 0 1 9.0468 124.0702 0 TpTP-16.003 0 Td0 Tr1 Ta(PCI slots) Tx (\r) TX TO1 Ap1 g0 R0 G0.5 w-222.2377 195.7444 m-222.2377 249.7525 L-293.349 249.7525 L-293.349 195.7444 L-222.2377 195.7444 Lb0 To1 0 0 1 -258.349 231.7236 0 TpTP-31.9991 0 Td0 Tr0 g1 w12 0 Tl(Memory controller\r) Tx 4.4341 -12 Td(PCI host bridge\r) Tx 5.5603 -12 Td(L2 controller) Tx (\r) TX TO1 g0 R0 G0.5 w-222.2377 46.7444 m-222.2377 100.7525 L-293.349 100.7525 L-293.349 46.7444 L-222.2377 46.7444 Lb0 To1 0 0 1 -258.349 82.7236 0 TpTP-20.6735 0 Td0 Tr0 g1 w/_Helvetica-Bold 8.001 Tf9 0 Tl(System I/O\r) Tx 20.6735 -9 Td/_Helvetica 8.001 Tf(\r) Tx -28.0054 -9 Td(Bus master IDE) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w-65.6615 173.7369 m-65.6615 82.7369 lS0.5 w-6.8845 83.0778 m-75.3145 83.0778 lS0 O1 g10 M3.651 92.618 m5.0209 92.618 6.1316 93.7286 6.1316 95.0986 C6.1316 95.0986 L6.1316 96.4686 5.0209 97.5792 3.651 97.5792 C-4.4039 97.5792 L-5.7738 97.5792 -6.8845 96.4686 -6.8845 95.0986 C-6.8845 95.0986 L-6.8845 93.7286 -5.7738 92.618 -4.4039 92.618 C3.651 92.618 Lb4 M-6.8845 95.0986 m-75.3145 95.0986 lS0 O1 g10 M3.651 50.4097 m5.0209 50.4097 6.1316 51.5204 6.1316 52.8903 C6.1316 52.8903 L6.1316 54.2602 5.0209 55.3709 3.651 55.3709 C-4.4039 55.3709 L-5.7738 55.3709 -6.8845 54.2602 -6.8845 52.8903 C-6.8845 52.8903 L-6.8845 51.5204 -5.7738 50.4097 -4.4039 50.4097 C3.651 50.4097 Lb4 M-6.8845 52.8903 m-75.3145 52.8903 lS0 O1 g10 M3.651 62.4305 m5.0209 62.4305 6.1316 63.5411 6.1316 64.9111 C6.1316 64.9111 L6.1316 66.2811 5.0209 67.3917 3.651 67.3917 C-4.4039 67.3917 L-5.7738 67.3917 -6.8845 66.2811 -6.8845 64.9111 C-6.8845 64.9111 L-6.8845 63.5411 -5.7738 62.4305 -4.4039 62.4305 C3.651 62.4305 Lb4 M-6.8845 64.9111 m-75.3145 64.9111 lS0 To1 0 0 1 -96.3073 -71.2422 0 TpTP0 Tr0 O0 g0 J 1 w0 Ta(PC serial) Tx (\r) TX TO0 To1 0 0 1 -238.349 -71.9297 0 TpTP-46.2382 0 Td0 Tr2 Ta(PC keyboard) Tx (\r) TX TO0 To1 0 0 1 -238.349 -83.9297 0 TpTP-37.3425 0 Td0 Tr(PC mouse) Tx (\r) TX TO1 g0 R0 G2 J 0.5 w 10 M-101.6407 -77.7361 m-100.2707 -77.7361 -99.1601 -76.6254 -99.1601 -75.2554 C-99.1601 -75.2554 L-99.1601 -73.8855 -100.2707 -72.7748 -101.6407 -72.7748 C-109.6956 -72.7748 L-111.0655 -72.7748 -112.1761 -73.8855 -112.1761 -75.2554 C-112.1761 -75.2554 L-112.1761 -76.6254 -111.0655 -77.7361 -109.6956 -77.7361 C-101.6407 -77.7361 Lb4 M-112.1761 -75.2554 m-180.6061 -75.2554 lS0 O1 g10 M-101.6407 -65.7152 m-100.2707 -65.7152 -99.1601 -64.6046 -99.1601 -63.2346 C-99.1601 -63.2346 L-99.1601 -61.8647 -100.2707 -60.754 -101.6407 -60.754 C-109.6956 -60.754 L-111.0655 -60.754 -112.1761 -61.8647 -112.1761 -63.2346 C-112.1761 -63.2346 L-112.1761 -64.6046 -111.0655 -65.7152 -109.6956 -65.7152 C-101.6407 -65.7152 Lb4 M-112.1761 -63.2346 m-180.6061 -63.2346 lS0 O1 g10 M-231.0156 -83.7361 m-232.3855 -83.7361 -233.4962 -82.6254 -233.4962 -81.2554 C-233.4962 -81.2554 L-233.4962 -79.8855 -232.3855 -78.7748 -231.0156 -78.7748 C-222.9607 -78.7748 L-221.5908 -78.7748 -220.4801 -79.8855 -220.4801 -81.2554 C-220.4801 -81.2554 L-220.4801 -82.6254 -221.5908 -83.7361 -222.9607 -83.7361 C-231.0156 -83.7361 Lb4 M-220.4801 -81.2554 m-152.0501 -81.2554 lS0 O1 g10 M-231.0156 -71.7152 m-232.3855 -71.7152 -233.4962 -70.6046 -233.4962 -69.2346 C-233.4962 -69.2346 L-233.4962 -67.8647 -232.3855 -66.754 -231.0156 -66.754 C-222.9607 -66.754 L-221.5908 -66.754 -220.4801 -67.8647 -220.4801 -69.2346 C-220.4801 -69.2346 L-220.4801 -70.6046 -221.5908 -71.7152 -222.9607 -71.7152 C-231.0156 -71.7152 Lb4 M-220.4801 -69.2346 m-152.0501 -69.2346 lS0 To1 0 0 1 -96.3073 -96.7838 0 TpTP0 Tr0 O0 g0 J 1 w0 Ta(Parallel\r) Tx T*(IEEE1284) Tx (\r) TX TO1 g0 R0 G2 J 0.5 w 10 M-101.6407 -96.7569 m-100.2707 -96.7569 -99.1601 -95.6462 -99.1601 -94.2763 C-99.1601 -94.2763 L-99.1601 -92.9063 -100.2707 -91.7957 -101.6407 -91.7957 C-109.6956 -91.7957 L-111.0655 -91.7957 -112.1761 -92.9063 -112.1761 -94.2763 C-112.1761 -94.2763 L-112.1761 -95.6462 -111.0655 -96.7569 -109.6956 -96.7569 C-101.6407 -96.7569 Lb0 To1 0 0 1 -45.9802 -141.7705 0 TpTP0 Tr0 g0 J 1 w 4 M(= External connector) Tx (\r) TX TO1 g0 R0 G2 J 0.5 w 10 M-51.3135 -142.7436 m-49.9436 -142.7436 -48.833 -141.6329 -48.833 -140.263 C-48.833 -140.263 L-48.833 -138.893 -49.9436 -137.7824 -51.3135 -137.7824 C-59.3685 -137.7824 L-60.7384 -137.7824 -61.849 -138.893 -61.849 -140.263 C-61.849 -140.263 L-61.849 -141.6329 -60.7384 -142.7436 -59.3685 -142.7436 C-51.3135 -142.7436 Lb4 M-112.1761 -94.2763 m-180.6061 -94.2763 lS2.5 w-65.9255 77.0702 mS1 Ap0 O1 g0 J 0.5 w-26.2169 46.7444 m-26.2169 100.7525 L-103.3282 100.7525 L-103.3282 46.7444 L-26.2169 46.7444 Lb0 To1 0 0 1 -65.3282 88.7236 0 TpTP-24.0088 0 Td0 Tr0 g1 w/_Helvetica-Bold 8.001 Tf1 Ta(System I/O 2\r) Tx 24.0088 -9 Td/_Helvetica 8.001 Tf(\r) Tx -34.8988 -9 Td(5 DBDMA channels\r) Tx 28.4508 -9 Td(VIA\r) Tx -3.5512 -9 Td(MPIC) Tx (\r) TX TO1 g0 R0 G0.5 w-11.6823 221.0702 m-11.6823 288.0702 L-21.6823 288.0702 L-21.6823 221.0702 L-11.6823 221.0702 Lb0 Ap[1 1 ]0 d-18.349 285.0702 m-18.349 223.7369 lS-14.3698 285.0702 m-14.3698 223.7369 lS1 Ap0 O1 g[]0 d-2.2865 135.7369 m-2.2865 202.7369 L-12.2865 202.7369 L-12.2865 135.7369 L-2.2865 135.7369 Lb0 Ap[1 1 ]0 d-8.9532 199.7369 m-8.9532 138.4037 lS-4.974 199.7369 m-4.974 138.4037 lS1 Ap0 O1 g[]0 d14.3593 135.7369 m14.3593 202.7369 L4.3593 202.7369 L4.3593 135.7369 L14.3593 135.7369 Lb0 Ap[1 1 ]0 d7.6927 199.7369 m7.6927 138.4037 lS11.6718 199.7369 m11.6718 138.4037 lS1 Ap0 O1 g[2 1 ]0 d29.0052 135.7369 m29.0052 202.7369 L21.0052 202.7369 L21.0052 135.7369 L29.0052 135.7369 Lb0 To1 0 0 1 9.0468 -44.9297 0 TpTP-15.7832 0 Td0 Tr0 g1 w []0 d(ISA slots) Tx (\r) TX TO1 g0 R0 G0.5 w-2.2865 -33.263 m-2.2865 33.7369 L-12.2865 33.7369 L-12.2865 -33.263 L-2.2865 -33.263 Lb0 Ap[1 1 ]0 d-8.9532 30.7369 m-8.9532 -30.5963 lS-4.974 30.7369 m-4.974 -30.5963 lS1 Ap0 O1 g[]0 d14.3593 -33.263 m14.3593 33.7369 L4.3593 33.7369 L4.3593 -33.263 L14.3593 -33.263 Lb0 Ap[1 1 ]0 d7.6927 30.7369 m7.6927 -30.5963 lS11.6718 30.7369 m11.6718 -30.5963 lS1 Ap0 O1 g[2 1 ]0 d29.0052 -33.263 m29.0052 33.7369 L21.0052 33.7369 L21.0052 -33.263 L29.0052 -33.263 Lb[]0 d-70.849 241.7369 m-137.849 241.7369 L-137.849 231.7369 L-70.849 231.7369 L-70.849 241.7369 Lb0 Ap[1 1 ]0 d-134.849 235.0703 m-73.5157 235.0703 lS-134.849 239.0494 m-73.5157 239.0494 lS1 Ap0 O1 g[]0 d-133.196 -99.263 m-133.196 -59.9216 L-197.3073 -59.9216 L-197.3073 -99.263 L-133.196 -99.263 Lb0 To1 0 0 1 -166.3073 -77.6171 0 TpTP-17.7815 0 Td0 Tr0 g1 w/_Helvetica-Bold 8.001 Tf(Super I/O) Tx /_Helvetica 8.001 Tf(\r) Tx -9.7795 -9 Td(with 8042, RTC) Tx (\r) TX TO1 g0 R0 G0.5 w-144.196 -142.5963 m-144.196 -117.263 L-187.3073 -117.263 L-187.3073 -142.5963 L-144.196 -142.5963 Lb0 To1 0 0 1 -166.3073 -126.6171 0 TpTP-12.0034 0 Td0 Tr0 g1 w(Floppy\r) Tx 0.2344 -9 Td(\(MFM\)) Tx (\r) TX TO0 Ap0 R0 G2 J 2.5 w-165.349 88.0703 m-175.6823 88.0703 l-175.6823 65.4036 l-165.6823 65.4036 lS1 Ap0 O1 g0 J 0.5 w-134.849 79.2369 m-134.849 96.2834 L-166.849 96.2834 L-166.849 79.2369 L-134.849 79.2369 Lb-134.849 57.6744 m-134.849 74.7209 L-166.849 74.7209 L-166.849 57.6744 L-134.849 57.6744 Lb-138.099 75.9869 m-138.099 93.0334 L-170.099 93.0334 L-170.099 75.9869 L-138.099 75.9869 Lb-138.099 54.4244 m-138.099 71.4709 L-170.099 71.4709 L-170.099 54.4244 L-138.099 54.4244 LbLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF%MSEPS Trailerpp_save restoregs 1878 2580 275 234 CB
761 2762 121 (Figure ) 121 SB
gr
gs 1878 2580 275 234 CB
882 2762 21 (1) 21 SB
gr
gs 1878 2580 275 234 CB
903 2762 763 (. HRP Initial Implementation Block Diagram) 763 SB
gr
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 21 (9) 21 SB
1887 3036 213 (May 8, 1995) 213 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 236 343 (I/O subsystem) 343 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 308 1686 (As discussed above, an important goal of the HRP is to support I/O peripherals from both the Power) 1686 SB
300 358 1799 (Macintosh environment and the PowerPC Reference Platform environment. This section will discuss some) 1799 SB
300 408 922 (of the hardware and software implications of this goal.) 922 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font5 ANSIFont font
300 508 250 (PCI devices) 250 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 580 1796 (The PCI bus is the backbone of the I/O subsystem. There is one PCI bus in the initial implementation. It is) 1796 SB
300 630 834 (compliant with Revision 2.1 of the PCI Standard.) 834 SB
300 730 910 (The following functions are connected to the PCI bus:) 910 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 778 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font5 ANSIFont font
375 781 358 (Graphics subsystem) 358 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
733 782 1347 (. This implementation has a 64-bit DRAM-based graphics accelerator chip with) 1347 SB
375 832 1711 (at least 2 MB of EDO DRAM, which provides high resolution true color and multimedia capabilities.) 1711 SB
375 882 1721 (It has a bi-endian frame buffer, controlled by aperture addresses. The chip is a commercially available) 1721 SB
375 932 1660 (part and is mounted on the motherboard. In general, an HRP-compliant platform need only ensure) 1660 SB
375 982 1650 (that the graphics subsystem support several standard pixel formats and dual-aperture mode for bi-) 1650 SB
375 1032 311 (endian operations.) 311 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1080 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font5 ANSIFont font
375 1083 159 (Ethernet) 159 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
534 1084 1418 (. The initial implementation uses a commercially available PCI bus-master Ethernet) 1418 SB
375 1134 790 (controller that is mounted on the motherboard.) 790 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1182 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1186 228 (Two or three ) 228 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font5 ANSIFont font
603 1185 441 (PCI expansion card slots) 441 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1044 1186 11 (.) 11 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1234 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font5 ANSIFont font
375 1237 287 (System I/O chip) 287 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
662 1238 1327 (. This chip is mounted on the motherboard and contains general I/O functions.) 1327 SB
375 1288 1717 (Although the initial implementation supports these functions, not all of them are required by the HRP) 1717 SB
375 1338 212 (architecture:) 212 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1386 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1390 1291 (Up to 33 MHz PCI bus interface that supports master and slave transactions.) 1291 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1438 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1442 751 (PCI Arbiter for 6 PCI masters plus the CPU.) 751 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1490 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1494 1554 (Bus master Enhanced IDE controller. This controller supports 2 IDE channels \(primary and) 1554 SB
525 1544 1549 (secondary\), and supports up to 4 devices \(2 per channel\). The controller has PCI bus master) 1549 SB
525 1594 1546 (capability with scatter/gather functions. It also supports PIO modes 0-4 and DMA modes 0-) 1546 SB
525 1644 1542 (2. Any operating system that runs on an HRP platform can boot from the IDE hard drive or) 1542 SB
525 1694 1308 (CD-ROM. It is also capable of booting from the SCSI hard disk or CD-ROM.) 1308 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1742 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1746 1416 (PCI/ISA bridge, for 8- and 16-bit ISA devices. This bridge allows ISA mastering by) 1416 SB
525 1796 984 (forwarding ISA-master memory references to the PCI bus.) 984 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1844 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1848 1482 (7-channel DMA between ISA devices and PCI memory, compatible with an 8237 DMA) 1482 SB
525 1898 815 (controller. 32-bit DMA addresses are supported.) 815 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1946 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1950 1469 (16-channel \(cascaded\) 8259 interrupt controller function. This controls interrupts from) 1469 SB
525 2000 1556 (timers and ISA devices. It can be configured with the MPIC interrupt controller logic on the) 1556 SB
525 2050 1508 (System I/O-2 chip \(see below\) so that the combined interrupt structure is compatible with) 1508 SB
525 2100 923 (either Intel-based software \(e.g. Windows\) or Mac OS.) 923 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2148 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2152 433 (Timer \(82C54\) functions.) 433 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2200 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2204 699 (Miscellaneous decodes and support logic.) 699 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 2252 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 39 /Times-Bold /font5 ANSIFont font
375 2255 333 (System I/O-2 chip.) 333 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
708 2256 1350 ( This chip is mounted on the motherboard and provides the following functions,) 1350 SB
375 2306 1716 (most of which are related to controlling I/O transfers associated with Mac OS environment. Although) 1716 SB
375 2356 1546 (the initial implementation supports these functions, not all of them are required by the HRP) 1546 SB
375 2406 212 (architecture:) 212 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2454 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2458 1291 (Up to 33 MHz PCI bus interface that supports master and slave transactions.) 1291 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2506 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2510 1440 (Controller for 5 Descriptor-Based DMA \(DBDMA\) channels. This function performs) 1440 SB
525 2560 1518 (scatter/gather and process synchronization operations based on control words and a buffer) 1518 SB
525 2610 354 (list in main memory.) 354 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2658 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2662 1494 (Integrated 85C30 Serial Communications Controller \(SCC\) cell which supports GeoPort) 1494 SB
32 0 0 42 42 0 0 0 42 /Symbol font
2019 2658 33 (\344) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2717 245 (and LocalTalk) 245 SB
32 0 0 42 42 0 0 0 42 /Symbol font
770 2713 33 (\344) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
803 2717 1236 ( operations. There are two SCC channels. Each is allocated one DBDMA) 1236 SB
525 2770 623 (channel for input and one for output.) 623 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2818 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2822 1548 (Apple Desktop Bus \(ADB\) hardware interface. This is the interface to the Power Macintosh) 1548 SB
525 2872 1024 (compatible keyboards, mice, tablets, and other ADB devices.) 1024 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 42 (10) 42 SB
1887 3036 213 (May 8, 1995) 213 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 234 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 238 1505 (Integrated Versatile Interface Adapter \(VIA\) cell. In this implementation of the HRP, the) 1505 SB
525 288 1318 (VIA cell is used for compatibility with earlier Macintosh interrupt processing.) 1318 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 336 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 340 1094 (Integrated SCSI-2 controller. One DBDMA channel is allocated.) 1094 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 388 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 392 1557 (Multiprocessor Interrupt Controller \(MPIC\) that supports 2 processors and up to 16 external) 1557 SB
525 442 1451 (and I/O interrupts. It can be configured with the 8259 interrupt controller logic on the) 1451 SB
525 492 1483 (System I/O chip so that the combined interrupt structure is compatible with either Intel-) 1483 SB
525 542 1200 (based \(e.g. Windows\) interrupt-handling software or Mac OS software.) 1200 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 590 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 594 1400 (Controller for a serial bus used to obtain internal system data for configuration and) 1400 SB
525 644 365 (diagnostics firmware.) 365 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font5 ANSIFont font
300 844 248 (ISA devices) 248 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 966 1786 (This initial HRP implementation contains an ISA subsystem to maintain compatibility with the many PC-) 1786 SB
300 1016 1749 (style plug-in devices. The bus carries 16 bits of data, 24 bits of addressing, and provides for up to 3 ISA) 1749 SB
300 1066 1732 (expansion slots. The System I/O chip described previously is the interface for the ISA subsystem to the) 1732 SB
300 1116 1687 (PCI bus. The functions in the initial implementation provide the following services which are either) 1687 SB
300 1166 789 (required or supported by the HRP architecture:) 789 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1264 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1268 541 (Audio Subsystem. SoundBlaster) 541 SB
32 0 0 42 42 0 0 0 42 /Symbol font
916 1264 33 (\344) 33 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
949 1268 997 ( compatibility is provided by a commercially available chip) 997 SB
375 1321 1688 (mounted on the motherboard. The system provides separate DMA channels for stereo recording and) 1688 SB
375 1371 160 (playback.) 160 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1419 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1423 1678 (Power Management Chip. This chip is mounted on the motherboard and provides hardware control) 1678 SB
375 1473 1697 (and interfaces to support the various system power-managed states, including hibernate and Mac OS) 1697 SB
375 1523 1719 (SoftPower function. The chip is a microcontroller that responds to activities such as modem rings and) 1719 SB
375 1573 1692 (mouse or keyboard signals. It provides power management interrupts and power supply control. The) 1692 SB
375 1623 1694 (controller is powered by a separate 5 V auxiliary power supply which is powered on whenever AC is) 1694 SB
375 1673 135 (applied.) 135 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1721 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1725 1336 (Super I/O Chip. In the initial implementation, this chip provides interfaces for:) 1336 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1773 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1777 1519 (Floppy Disk interface equivalent to the NS82077 controller. Auto-sense and auto-eject are) 1519 SB
525 1827 1511 (supported for 1.44 MB \(formatted\) MFM drives. GCR disk format is not supported by the) 1511 SB
525 1877 1503 (HRP architecture nor by this implementation. One ISA DMA channel is allocated for the) 1503 SB
525 1927 235 (floppy device.) 235 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 1975 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 1979 1526 (Parallel Port. IEEE 1284 EPP and ECP are supported. One ISA DMA channel is allocated) 1526 SB
525 2029 340 (for the parallel port.) 340 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2077 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2081 1520 (2 serial ports, software-compatible with PC16550. The controller decodes COM ports 1-4.) 1520 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2129 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2133 1456 (PC-compatible keyboard and mouse control is provided by Intel 8042-compliant logic.) 1456 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2181 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2185 845 (Real Time Clock \(RTC\) PC-compatible functions.) 845 SB
32 0 0 42 42 0 0 0 42 /Symbol font
450 2233 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
525 2237 539 (Infra-red controller \(IrDA, HP\).) 539 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 2285 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 2289 856 (NVRAM, implemented as an 8K x 8 discrete chip.) 856 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 2337 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 2341 197 (3 ISA slots.) 197 SB
32 0 0 50 50 0 0 0 46 /Times-Bold /font5 ANSIFont font
300 2541 340 (Open Firmware) 340 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 2613 1726 (The HRP architecture requires all compliant systems to implement the Open Firmware startup process) 1726 SB
300 2663 1698 (defined by IEEE 1275-1994 Standard for Boot \(Initialization, Configuration\) Firmware, and the PCI) 1698 SB
300 2713 1470 (Binding to IEEE 1275-1994 specification. These standards evolved from the OpenBoot) 1470 SB
32 0 0 27 27 0 0 0 24 /Times-Roman /font4 ANSIFont font
1770 2708 47 (TM ) 47 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
1817 2713 154 (firmware) 154 SB
300 2763 772 (architecture introduced by Sun Microsystems.) 772 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 42 (11) 42 SB
1887 3036 213 (May 8, 1995) 213 SB
300 236 1734 (The Open Firmware startup process is driven by startup firmware, also called boot firmware, in system) 1734 SB
300 286 1736 (ROM and in ROM chips on expansion cards. While the startup firmware is running, the computer will) 1736 SB
300 336 1673 (power up and configure its hardware \(including peripheral devices\) independently of any operating) 1673 SB
300 386 1789 (system. The computer will then find an operating system on a mass storage device or in ROM, load it into) 1789 SB
300 436 1792 (system memory, and terminate the Open Firmware startup process by giving that operating system control) 1792 SB
300 486 1742 (of the PowerPC processor. The six native operating systems mentioned earlier are planned to run on an) 1742 SB
300 536 758 (HRP compliant system with Open Firmware.) 758 SB
300 636 900 (The startup firmware includes these specific features:) 900 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 684 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 688 1698 (It is written in the Forth language, as defined by IEEE Standard 1275. Firmware code is stored in an) 1698 SB
375 738 1626 (abbreviated representation called FCode. The computer\222s startup firmware includes a loader and) 1626 SB
375 788 1703 (interpreter that will install FCode in system memory. Firmware in expansion card ROMs can modify) 1703 SB
375 838 1701 (the Open Firmware startup process by supplying device-specific FCode that the computer\222s firmware) 1701 SB
375 888 900 (loads and runs before launching an operating system.) 900 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 936 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 940 1697 (The startup process creates a data structure of nodes called a device tree, in which the characteristics) 1697 SB
375 990 1691 (of the hardware system and of each peripheral device are described by property lists. The device tree) 1691 SB
375 1040 1608 (is stored in system memory. The operating system that is ultimately installed and launched will) 1608 SB
375 1090 1674 (search the device tree to determine the nature and characteristics of available hardware. The device) 1674 SB
375 1140 1683 (tree can also store runtime drivers, written in the PowerPC instruction set, for various combinations) 1683 SB
375 1190 563 (of devices and operating systems.) 563 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1238 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1242 1703 (System firmware includes a basic set of device drivers and associated resources such as fonts, written) 1703 SB
375 1292 1627 (in FCode, that are required during system startup before an operating system is running. Plug-in) 1627 SB
375 1342 1666 (expansion cards that are used during startup may also contain driver code. The firmware in system) 1666 SB
375 1392 1640 (ROM installs these drivers in system memory so they can be executed on the PowerPC processor.) 1640 SB
32 0 0 42 42 0 0 0 42 /Symbol font
300 1440 30 (\267 ) 75 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
375 1444 1661 (Firmware in system ROM may also contain debugging facilities for both FCode and some kinds of) 1661 SB
375 1494 384 (operating system code.) 384 SB
32 0 0 50 50 0 0 0 46 /Helvetica-BoldOblique /font11 ANSIFont font
300 1644 858 (Summary of Initial Hardware Design) 858 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 1766 1604 (The initial implementation of the HRP architecture described here will support I/O devices and) 1604 SB
300 1816 1769 (peripherals from both the Power Macintosh and the original PowerPC Reference Platform environments.) 1769 SB
300 1866 1655 (Controllers and physical connectors are provided for devices from both environments. This allows) 1655 SB
300 1916 1689 (operating systems to present their traditional user interfaces, while providing a path to eliminate the) 1689 SB
300 1966 1431 (hardware incompatibilities between these environments that have existed in the past.) 1431 SB
300 2066 1739 (The hardware partitioning and component selection for the initial implementation are based on today\222s) 1739 SB
300 2116 1766 (technology, industry standards, and cost-effective offerings from various chip companies including IBM,) 1766 SB
300 2166 1795 (Apple, and Motorola. The partitioning and components will change as standards evolve and as technology) 1795 SB
300 2216 1741 (and cost improve. For example, some systems may find it effective to build into the motherboard a chip) 1741 SB
300 2266 1723 (that integrates PCI-attached Ethernet and SCSI functions. L2 controllers integrated on a chip with tag) 1723 SB
300 2316 1717 (SRAMs could be used. At some point, perhaps the two System I/O chips will be merged. One or more) 1717 SB
300 2366 1696 (other system functions could be put onto a System I/O chip. A faster or wider PCI bus could be used.) 1696 SB
300 2416 1300 (Other IDE modes could be included. These are only some of the possibilities.) 1300 SB
300 2516 1757 (The designers of this implementation believe they have met the HRP goal of creating a computer system) 1757 SB
300 2566 1156 (that supports the six native operating systems and their applications.) 1156 SB
EJ RS
%%PageTrailer
SS
0 0 25 22 804 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
0 0 0 fC
300 3036 92 (Page ) 92 SB
392 3036 42 (12) 42 SB
1887 3036 213 (May 8, 1995) 213 SB
32 0 0 58 58 0 0 0 53 /Helvetica-Bold /font9 ANSIFont font
300 236 263 (Summary) 263 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font4 ANSIFont font
300 318 1736 (The HRP provides benefits for computer system customers, software vendors, and hardware vendors. It) 1736 SB
300 368 1784 (provides a common hardware and software design structure that allows customers to focus on the solution) 1784 SB
300 418 1651 (to their problems rather than on the architecture and features of a particular hardware platform. It) 1651 SB
300 468 1753 (preserves customers\222 investments in applications that run on today\222s PowerPC-based platforms, and lets) 1753 SB
300 518 863 (them use many of their existing peripheral devices.) 863 SB
300 618 1737 (The HRP will evolve to accommodate the latest industry standards, trends, and customer requirements.) 1737 SB
300 668 1787 (While the HRP architecture spans portable through server systems, the focus of the initial implementation) 1787 SB
300 718 1784 (is on the desktop market. The initial implementation provides a glimpse into the kinds of hardware issues) 1784 SB
300 768 1737 (being discussed by the designers of the HRP architecture. Apple, IBM, and Motorola will each produce) 1737 SB
300 818 1742 (other HRP-compliant systems that have company-specific added value but which will still run the same) 1742 SB
300 868 600 (operating systems and applications.) 600 SB
300 968 1713 (Apple, IBM, and Motorola intend to work with their partners to enable them to contribute to the HRP) 1713 SB
300 1018 1770 (definition and build HRP systems. Companies interested in learning more should contact Apple, IBM, or) 1770 SB
300 1068 1700 (Motorola. The three companies intend to release architecture, ASIC, and system specifications to the) 1700 SB
300 1118 1772 (industry. This will reduce cost and prices over time as a large, commodity-priced infrastructure forms. In) 1772 SB
300 1168 1747 (addition, they plan to work with operating system vendors and independent software vendors \(ISV\222s\) to) 1747 SB
300 1218 821 (enable them to port their code to HRP platforms.) 821 SB
300 1318 1746 (Much thought has gone into designing the HRP architecture and its initial implementation. The HRP is) 1746 SB
300 1368 1686 (planned to be the cornerstone for products from Apple, IBM, Motorola, and the rest of the PowerPC) 1686 SB
300 1418 924 (industry as the world of RISC-based computing grows.) 924 SB
EJ RS
%%PageTrailer
%%Trailer
SVDoc restore
end
% TrueType font name key:
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT310000 = 
%    MSTT31c7d3 = 70c7DTimes New RomanF00000021000001900000
%    MSTT31c7e1 = 70c7DTimes New RomanF00000026000001900000
%    MSTT31c7ef = 70c7DArialF0000003a000002bc0000
%    MSTT31c7fa = 70c7DArialF00000026000002bc0000
%    MSTT31c805 = 70c7DTimes New RomanF0000002a000001900000
%    MSTT31c813 = 70c7DTimes New RomanF0000001b000001900000
%    MSTT31c821 = 70c7DTimes New RomanF0000002a000001900001
%    MSTT31c82f = 70c7DArialF00000032000002bc0001
%    MSTT31c83a = 70c7DTimes New RomanF00000032000001900000
%    MSTT31c848 = 70c7DArialF0000003a000002bc0001
%    MSTT31c856 = 70c7DTimes New RomanF0000002a000002bc0000
%    MSTT31c864 = 70c7DTimes New RomanF00000000000002bc0000
%    MSTT31c872 = 70c7DTimes New RomanF00000032000002bc0000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Helvetica-Bold
%%+ font Helvetica-BoldOblique
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
