PARSER_BEGIN(LexicalAnalyser)


	public class LexicalAnalyser{

		public static void main(String[] args){

			LexicalAnalyser lexical = new LexicalAnalyser(System.in);
			
			boolean maxIdentifier = false;
			boolean maxInt = false;
			
			while(true){

				try {
					  lexical.tokenize();
				} catch (ParseException ex) {
					System.out.println("ParseException");
					System.out.println(ex.getMessage());

					System.exit(-1);

				} catch (TokenMgrError ex) {
					System.out.println("TokenManagerError");
					System.out.println(ex.getMessage());

					System.exit(-1);
				}
		}
	}
}
PARSER_END(LexicalAnalyser)

/* Eliminando caracteres despreziveis */
SKIP: {  " "|
		"\r"|
		"\t"|
		"\n"| 
		 <"{"  (~["}"])*  "}">
		}

/* Palavras reservadas */
TOKEN: { <PROGRAM: "program"> }
TOKEN: { <INTEGER: "integer"> }
TOKEN: { <REAL: "real"> } 
TOKEN: { <PROCEDURE: "procedure"> }
TOKEN: { <VAR: "var"> }
TOKEN: { <TRUE: "true"> }
TOKEN: { <FALSE: "false"> }
TOKEN: { <BEGIN: "begin"> }
TOKEN: { <END: "end"> }
TOKEN: { <IF: "if"> }
TOKEN: { <THEN: "then"> }
TOKEN: { <ELSE: "else"> }
TOKEN: { <WHILE: "while"> }
TOKEN: { <DO: "do"> }
TOKEN: { <REPEAT: "repeat"> }
TOKEN: { <UNTIL: "until"> }
TOKEN: { <CONSTANT: "const"> }

/* Simbolos */
TOKEN: { <GREATER: ">"> }
TOKEN: { <GREATEREQ: ">="> }
TOKEN: { <NOTEQUAL: "<>"> }
TOKEN: { <EQUAL: "="> }
TOKEN: { <LESSER: "<"> }
TOKEN: { <LESSEREQ: "<="> }
TOKEN: { <PLUS: "+"> }
TOKEN: { <MINUS: "-"> }
TOKEN: { <STAR: "*"> }
TOKEN: { <SEMICOLON: ";"> }
TOKEN: { <COMMA: ","> }
TOKEN: { <DOT: "."> }
TOKEN: { <LPAR: "("> }
TOKEN: { <RPAR: ")"> }
TOKEN: { <ASSIGNMENT: ":="> }
TOKEN: { <COLON: ":"> }

/* Tokens auxiliares */
TOKEN: { <#LETTER: ["a"-"z"]|["A"-"Z"]> }
TOKEN: { <#DIGIT: ["0"-"9"]> }

/* Inteiros e reais */
TOKEN: { <INTEGERNUMBER: (<DIGIT>)+> } 
TOKEN: { <REALNUMBER: (<DIGIT>)+ (".") (<DIGIT>)+> } 

/* Identificadores */
TOKEN: { <ID: "read"|"write"|(<LETTER>)(<LETTER> | <DIGIT>)*> }

/* Parser */
void tokenize() throws TokenMgrError, ParseException :{
	Token t;
}
{
		t = <PROGRAM> { 
            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ") " + "PROGRAM | " + t.toString()); 
        } |

		t = <INTEGER> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "INTEGER | "+ t.toString()); 
        } |

		t = <PROCEDURE> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "PROCEDURE | " + t.toString()); 
        } |

		t = <VAR> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "VAR | " + t.toString()); 
        } |
		
        t = <BEGIN> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "BEGIN | " + t.toString());
        } |

		t = <END> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "END | " + t.toString());
        } |
		
        t = <IF> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "IF | "+ t.toString());
        } |
		
        t = <THEN> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "THEN | " + t.toString());
        } |
		
        t = <ELSE> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "ELSE | " + t.toString());
        } |
		
        t = <WHILE> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "WHILE | " + t.toString());
        } |
		
        t = <DO> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "DO | " + t.toString()); 
        } |
		
        t = <REPEAT> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ")" + "REPEAT | " + t.toString());
        } |
		
        t = <UNTIL> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "UNTIL | "+ t.toString());
        } |

        t = <CONSTANT> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "CONSTL | "+ t.toString());
        } |

/* Simbolos */

		t = <GREATER> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "GREATER | " + t.toString());
        } |

		t = <GREATEREQ> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "GREATEREQ | " + t.toString());
        } |

		t = <NOTEQUAL> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "NOTEQUAL | " + t.toString());
        } |

		t = <EQUAL> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "EQUAL | " + t.toString());
        } |

		t = <LESSER> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "LESSER | " + t.toString());
        } |

		t = <LESSEREQ> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "LESSEREQ | " + t.toString());
        } |
		
        t = <PLUS> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "PLUS | "+t.toString());
        } |

		t = <MINUS> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "MINUS | " + t.toString());
        } |
		
        t = <STAR> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "STAR | " + t.toString());
        } |
		
        t = <SEMICOLON> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "SEMICOLON | " + t.toString());
        } |
		
        t = <COMMA> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "COMMA | " + t.toString());
        } |
		
        t = <DOT> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "DOT | " + t.toString());
        } |
		
        t = <LPAR> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "LPAR | " + t.toString());
        } |
		
        t = <RPAR> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "RPAR | " + t.toString());
        } |
		
        t = <ASSIGNMENT> { 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "ASSIGMENT | " + t.toString());
        } |
		
        t = <COLON>{ 
            System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " + "COLON | " + t.toString()); 
        }|


/* Inteiros */
		t = <INTEGERNUMBER> { 

			try{
		
				int size = Integer.parseInt(t.toString());	

				if(size < 32767){ 
                    System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") "+"NUMBER | "+t.toString());
                }
				else {
                    throw new NumberFormatException();
			    }
            } catch (NumberFormatException e){ 
			
			    System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") "
                                    + "INTEGER NUMBER " + t.toString() + " GREATER THAN POSSIBLE INTEGER (32767)");
            }			
		} |

/* Identificadores */
		t = <ID> { 
		
				if (t.endColumn - t.beginColumn < 33){ 
                    System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") "+"ID |"+t.toString());
				
                }
                else {
                    System.out.println("@("+ t.beginLine + "," + t.beginColumn + ") " 
                                        +" : ID "+t.toString()+" TOO BIG !!!");
				}
		} |

		<EOF> { 
            System.exit(0); 
        }
}
