/* Generated By:JavaCC: Do not edit this line. Compiler.java */
        public class Compiler implements CompilerConstants {

                public static void main(String[] args) {

                        Compiler compiler = new Compiler(System.in);

                        boolean maxIdentifier = false;
                        boolean maxInt = false;

                        while(true){

                                try {
                                          compiler.program();

                } catch (ParseException e) {
                                        System.out.println("ParseException");
                                        System.out.println(e.getMessage());
                                        System.exit(-1);

                                } catch (TokenMgrError e) {
                                        System.out.println("TokenManagerError");
                                        System.out.println(e.getMessage());

                                        System.exit(-1);
                                }
                }
        }

  static final public void program() throws ParseException, TokenMgrError, ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    programBody();
    jj_consume_token(DOT);
    jj_consume_token(0);
    System.out.println("PARSER SUCESSFUL!");
    System.exit(0);
  }

  static final public void programBody() throws ParseException {
    declaration();
    jj_consume_token(BEGIN);
    commands();
    jj_consume_token(END);
  }

  static final public void declaration() throws ParseException {
    constantsDeclarations();
    variablesDeclarations();
    proceduresDeclarations();
  }

  static final public void constantsDeclarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      jj_consume_token(CONSTANT);
      jj_consume_token(ID);
      jj_consume_token(EQUAL);
      number();
      jj_consume_token(SEMICOLON);
      constantsDeclarations();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void variablesDeclarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      variables();
      jj_consume_token(COLON);
      variableType();
      jj_consume_token(SEMICOLON);
      variablesDeclarations();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void variables() throws ParseException {
    jj_consume_token(ID);
    otherVariables();
  }

  static final public void otherVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      variables();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void variableType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void proceduresDeclarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      jj_consume_token(PROCEDURE);
      jj_consume_token(ID);
      parameters();
      jj_consume_token(SEMICOLON);
      procedureBody();
      proceduresDeclarations();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      parametersList();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void parametersList() throws ParseException {
    variables();
    jj_consume_token(COLON);
    variableType();
    otherParameters();
  }

  static final public void otherParameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      parametersList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void procedureBody() throws ParseException {
    localDeclarations();
    jj_consume_token(BEGIN);
    commands();
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

  static final public void localDeclarations() throws ParseException {
    variablesDeclarations();
  }

  static final public void argumentsList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      arguments();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void arguments() throws ParseException {
    jj_consume_token(ID);
    otherIDs();
  }

  static final public void otherIDs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      arguments();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void falseCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      command();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void commands() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
    case IF:
    case WHILE:
    case REPEAT:
    case READLN:
    case WRITELN:
    case READ:
    case WRITE:
    case ID:
      command();
      jj_consume_token(SEMICOLON);
      commands();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READLN:
      jj_consume_token(READLN);
      jj_consume_token(LPAR);
      variables();
      jj_consume_token(RPAR);
      break;
    case READ:
      jj_consume_token(READ);
      jj_consume_token(LPAR);
      variables();
      jj_consume_token(RPAR);
      break;
    case WRITELN:
      jj_consume_token(WRITELN);
      jj_consume_token(LPAR);
      variables();
      jj_consume_token(RPAR);
      break;
    case WRITE:
      jj_consume_token(WRITE);
      jj_consume_token(LPAR);
      variables();
      jj_consume_token(RPAR);
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
      command();
      jj_consume_token(UNTIL);
      condition();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      command();
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      command();
      falseCondition();
      break;
    case ID:
      jj_consume_token(ID);
      attribuition();
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      commands();
      jj_consume_token(END);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void attribuition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSINGMENT:
      jj_consume_token(ASSINGMENT);
      expression();
      break;
    default:
      jj_la1[12] = jj_gen;
      argumentsList();
    }
  }

  static final public void condition() throws ParseException {
    expression();
    relation();
    expression();
  }

  static final public void relation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    case GREATEREQ:
      jj_consume_token(GREATEREQ);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      break;
    case LESSEREQ:
      jj_consume_token(LESSEREQ);
      break;
    case LESSER:
      jj_consume_token(LESSER);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    term();
    otherTerms();
  }

  static final public void term() throws ParseException {
    unaryOperator();
    factor();
    otherFactors();
  }

  static final public void unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void otherTerms() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      sumOperators();
      term();
      otherTerms();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void sumOperators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void otherFactors() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIVISION:
      multiplierOperators();
      factor();
      otherFactors();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void multiplierOperators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case INTEGERNUMBER:
    case REALNUMBER:
      number();
      break;
    case LPAR:
      jj_consume_token(LPAR);
      expression();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGERNUMBER:
      jj_consume_token(INTEGERNUMBER);
      break;
    case REALNUMBER:
      jj_consume_token(REALNUMBER);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0x400,0x0,0x180,0x200,0x0,0x0,0x0,0x0,0x20000,0x794a000,0x794a000,0x0,0xf8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x0,0x0,0x100,0x20,0x100,0x20,0x0,0x10000,0x10000,0x400,0x1,0x6,0x6,0x6,0x6,0x18,0x18,0x1c100,0xc000,};
   }

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
