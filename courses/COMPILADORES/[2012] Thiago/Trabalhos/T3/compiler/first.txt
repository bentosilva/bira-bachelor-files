Gramática original:

﻿1. <programa> ::= program ident ; <corpo> . 
 2. <corpo> ::= <dc> begin <comandos> end 
 3. <dc> ::= <dc_v> <dc_p> 
 4. <dc_v> ::= var <variaveis> : <tipo_var> ; <dc_v> | λ 
 5. <tipo_var> ::= real | integer 

 6. <variaveis> ::= ident <mais_var> 
 7. <mais_var> ::= , <variaveis> | λ 
 8. <dc_p> ::= procedure ident <parametros> ; <corpo_p> <dc_p> | λ 
 9. <parametros> ::= ( <lista_par> ) | λ 
10. <lista_par> ::= <variaveis> : <tipo_var> <mais_par> 

11. <mais_par> ::= ; <lista_par> | λ 
12. <corpo_p> ::= <dc_loc> begin <comandos> end ; 
13. <dc_loc> ::= <dc_v> 
14. <lista_arg> ::= ( <argumentos> ) | λ 
15. <argumentos> ::= ident <mais_ident> 

16. <mais_ident> ::= ; <argumentos> | λ 
17. <pfalsa> ::= else <cmd> | λ 
18. <comandos> ::= <cmd> ; <comandos> | λ 
19. <cmd> ::= read ( <variaveis> ) | 
	write ( <variaveis> ) | 
	while <condicao> do <cmd> | 
	if <condicao> then <cmd> <pfalsa> | 
	ident := <expressao> | 
	ident <lista_arg> | 
	begin <comandos> end |
	repeat <comandos> until <condicao>
20. <condicao> ::= <expressao> <relacao> <expressao> 

21. <relacao> ::= = | <> | >= | <= | > | < 
22. <expressao> ::= <termo> <outros_termos> 
23. <op_un> ::= + | - | λ 
24. <outros_termos> ::= <op_ad> <termo> <outros_termos> | λ 
25. <op_ad> ::= + | - 

26. <termo> ::= <op_un> <fator> <mais_fatores> 
27. <mais_fatores> ::= <op_mul> <fator> <mais_fatores> | λ 
28. <op_mul> ::= * | / 
29. <fator> ::= ident | numero_int | numero_real | ( <expressao> ) 

-----

Calculando a função first (passo 1):

 1. first(<programa>) = {program}
 2. first(<corpo>) = first(<dc>) //U {begin}
 3. first(<dc>) = first(<dc_v>) //U first(<dc_p>)
 4. first(<dc_v>) = {var, λ}
 5. first(<tipo_var>) = {real, integer}

 6. first(<variaveis>) = {ident}
 7. first(<mais_var>) = {',', λ}
 8. first(<dc_p>) = {procedure, λ}
 9. first(<parametros>) = {(, λ}
10. first(<lista_par>) = first(<variaveis>) //U {:}

11. first(<mais_par>) = {;, λ}
12. first(<corpo_p>) = first(<dc_loc>) //U {begin}
13. first(<dc_loc>) = first(<dc_v>)
14. first(<lista_arg>) = {(, λ}
15. first(<argumentos>) = {ident}

16. first(<mais_ident>) = {;, λ}
17. first(<pfalsa>) = {else, λ}
18. first(<comandos>) = first(cmd) /*U {;}*/ + {λ}
19. first(<cmd>) = {read, write, while, if, ident} U
	{ident, begin, repeat} //não são disjuntos!!!
20. first(<condicao>) = first(<expressao>) 
	//U first(<relacao>) //U first(<expressao>)

21. first(<relacao>) = {=, <>, >=, <=, >, <}
22. first(<expressao>) = first(<termo>) //U first(<outros_termos>)
23. first(<op_un>) = {+, -, λ}
24. first(<outros_termos>) = first(op_ad) 
	/* U first(<termo>) //U first(<outros_termos>) */ U {λ}
25. first(<op_ad>) = {+, -}

26. first(<termo>) = first(<op_un>)
	//U first(<fator>) //U first(<mais_fatores>)
27. first(<mais_fatores>) = first(<op_mul>)
	/* U first(<fator>) //U first(<mais_fatores>) */ U {λ}
28. first(<op_mul>) = {*, /}
29. first(<fator>) = {ident, numero_int, numero_real, (}

-----

Ajustes e resultados do passo 1:

Redefinir regra 19 para:
19a. <cmd> ::= read ( <variaveis> ) | write ( <variaveis> ) |
	while <condicao> do <cmd> | if <condicao> then <cmd> <pfalsa> |
	ident <pos_ident> | begin <comandos> end |
	repeat <comandos> until <condicao>
19b. <pos_ident> ::= := <expressao> | <lista_arg>

Corrigindo first(<cmd>):
19a. first(<cmd>) = {read, write, while, if, ident, begin, repeat}
19b. first(<pos_ident>) = {:=} U first(<lista_arg>)

Resolvidos:
 1. first(<programa>) = {program}
 4. first(<dc_v>) = {var, λ}
 5. first(<tipo_var>) = {real, integer}
 6. first(<variaveis>) = {ident}
 7. first(<mais_var>) = {',', λ}
 8. first(<dc_p>) = {procedure, λ}
 9. first(<parametros>) = {(, λ}
11. first(<mais_par>) = {;, λ}
14. first(<lista_arg>) = {(, λ}
15. first(<argumentos>) = {ident}
16. first(<mais_ident>) = {;, λ}
17. first(<pfalsa>) = {else, λ}
19a. first(<cmd>) = {read, write, while, if, ident, begin, repeat}
21. first(<relacao>) = {=, <>, >=, <=, >, <}
23. first(<op_un>) = {+, -, λ}
25. first(<op_ad>) = {+, -}
28. first(<op_mul>) = {*, /}
29. first(<fator>) = {ident, numero_int, numero_real, (}

Pendentes:
 2. first(<corpo>) = first(<dc>) //U {begin}
 3. first(<dc>) = first(<dc_v>) //U first(<dc_p>)
10. first(<lista_par>) = first(<variaveis>) //U {:}
12. first(<corpo_p>) = first(<dc_loc>) //U {begin}
13. first(<dc_loc>) = first(<dc_v>)
18. first(<comandos>) = first(cmd) /*U {;}*/ + {λ}
19b. first(<pos_ident>) = {:=} U first(<lista_arg>)
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)
22. first(<expressao>) = first(<termo>) //U first(<outros_termos>)
24. first(<outros_termos>) = first(op_ad)
	/* U first(<termo>) //U first(<outros_termos>) */ U {λ}
26. first(<termo>) = first(<op_un>)
	//U first(<fator>) //U first(<mais_fatores>)
27. first(<mais_fatores>) = first(<op_mul>)
	/* U first(<fator>) //U first(<mais_fatores>) */ U {λ}

-----

Calculando a função first (passo 2):

 2. first(<corpo>) = first(<dc>) //U {begin}
 3. first(<dc>) = {var} U first(<dc_p>) //λ in first(<dc_v>)
10. first(<lista_par>) = {ident} //λ not in first(<variaveis>)
12. first(<corpo_p>) = first(<dc_loc>) //U {begin}

13. first(<dc_loc>) = {var, λ}
18. first(<comandos>) = {read, write, while, if, ident, begin, repeat} 
	U {λ} //λ not in first(cmd)
19b. first(<pos_ident>) = {:=} U {(, λ}
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)

22. first(<expressao>) = first(<termo>) //U first(<outros_termos>)
24. first(<outros_termos>) = {+, -} U {λ} //λ not in first(op_ad)
26. first(<termo>) = {+, -} U first(<fator>)
	//λ in first(<op_un>) //U first(<mais_fatores>)
27. first(<mais_fatores>) = {*, /} U {λ} //λ not in first(<op_mul>)

-----

Resultados e ajustes do passo 2:

Resolvidos:
10. first(<lista_par>) = {ident}
13. first(<dc_loc>) = {var, λ}
18. first(<comandos>) = {read, write, while, if, ident, begin, repeat, λ}
19b. first(<pos_ident>) = {:=, (, λ}
24. first(<outros_termos>) = {+, -, λ}
27. first(<mais_fatores>) = {*, /, λ}

Pendentes:
 2. first(<corpo>) = first(<dc>) //U {begin}
 3. first(<dc>) = {var} U first(<dc_p>)
12. first(<corpo_p>) = first(<dc_loc>) //U {begin}
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)
22. first(<expressao>) = first(<termo>) //U first(<outros_termos>)
26. first(<termo>) = {+, -} U first(<fator>) //U first(<mais_fatores>)

-----

Calculando a função first (passo 3):

 2. first(<corpo>) = first(<dc>) //U {begin}
 3. first(<dc>) = {var} U {procedure, λ}
12. first(<corpo_p>) = {var} U {begin} //λ in first(<dc_loc>)
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)
22. first(<expressao>) = first(<termo>) //U first(<outros_termos>)
26. first(<termo>) = {+, -} U
	{ident, numero_int, numero_real, (} //λ not in first(<fator>)

-----

Resultados e ajustes do passo 3:

Resolvidos:
 3. first(<dc>) = {var, procedure, λ}
12. first(<corpo_p>) = {var, begin}
26. first(<termo>) = {+, -, ident, numero_int, numero_real, (}

Pendentes:
 2. first(<corpo>) = first(<dc>) //U {begin}
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)
22. first(<expressao>) = first(<termo>) //U first(<outros_termos>)

-----

Calculando a função first (passo 4):

 2. first(<corpo>) = {var, procedure} U {begin} //λ in first(<dc>)
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)
22. first(<expressao>) = {+, -, ident, numero_int, numero_real, (}
	//λ not in first(<termo>)

-----

Resultados e ajustes do passo 4:

Resolvidos:
 2. first(<corpo>) = {var, procedure, begin}
22. first(<expressao>) = {+, -, ident, numero_int, numero_real, (}

Pendentes:
20. first(<condicao>) = first(<expressao>)
	//U first(<relacao>) //U first(<expressao>)

-----

Calculando a função first (passo 5):

20. first(<condicao>) = {+, -, ident, numero_int, numero_real, (}
	//λ not in first(<expressao>)

-----

Resultados e ajustes do passo 5:

Resolvidos:
20. first(<condicao>) = {+, -, ident, numero_int, numero_real, (}

Pendentes:

-----

Resultado final:

 1. first(<programa>) = {program}
 2. first(<corpo>) = {var, procedure, begin}
 3. first(<dc>) = {var, procedure, λ}
 4. first(<dc_v>) = {var, λ}
 5. first(<tipo_var>) = {real, integer}
 6. first(<variaveis>) = {ident}
 7. first(<mais_var>) = {',', λ}
 8. first(<dc_p>) = {procedure, λ}
 9. first(<parametros>) = {(, λ}
10. first(<lista_par>) = {ident}
11. first(<mais_par>) = {;, λ}
12. first(<corpo_p>) = {var, begin}
13. first(<dc_loc>) = {var, λ}
14. first(<lista_arg>) = {(, λ}
15. first(<argumentos>) = {ident}
16. first(<mais_ident>) = {;, λ}
17. first(<pfalsa>) = {else, λ}
18. first(<comandos>) = {read, write, while, if, ident, begin, repeat, λ}
19a. first(<cmd>) = {read, write, while, if, ident, begin, repeat}
19b. first(<pos_ident>) = {:=, (, λ}
20. first(<condicao>) = {+, -, ident, numero_int, numero_real, (}
21. first(<relacao>) = {=, <>, >=, <=, >, <}
22. first(<expressao>) = {+, -, ident, numero_int, numero_real, (}
23. first(<op_un>) = {+, -, λ}
24. first(<outros_termos>) = {+, -, λ}
25. first(<op_ad>) = {+, -}
26. first(<termo>) = {+, -, ident, numero_int, numero_real, (}
27. first(<mais_fatores>) = {*, /, λ}
28. first(<op_mul>) = {*, /}
29. first(<fator>) = {ident, numero_int, numero_real, (}

Gramática:

﻿1. <programa> ::= program ident ; <corpo> .
 2. <corpo> ::= <dc> begin <comandos> end
 3. <dc> ::= <dc_v> <dc_p>
 4. <dc_v> ::= var <variaveis> : <tipo_var> ; <dc_v> | λ
 5. <tipo_var> ::= real | integer
 6. <variaveis> ::= ident <mais_var>
 7. <mais_var> ::= , <variaveis> | λ
 8. <dc_p> ::= procedure ident <parametros> ; <corpo_p> <dc_p> | λ
 9. <parametros> ::= ( <lista_par> ) | λ
10. <lista_par> ::= <variaveis> : <tipo_var> <mais_par>
11. <mais_par> ::= ; <lista_par> | λ
12. <corpo_p> ::= <dc_loc> begin <comandos> end ;
13. <dc_loc> ::= <dc_v>
14. <lista_arg> ::= ( <argumentos> ) | λ
15. <argumentos> ::= ident <mais_ident>
16. <mais_ident> ::= ; <argumentos> | λ
17. <pfalsa> ::= else <cmd> | λ
18. <comandos> ::= <cmd> ; <comandos> | λ
19a. <cmd> ::= read ( <variaveis> ) |
	write ( <variaveis> ) |
	while <condicao> do <cmd> |
	if <condicao> then <cmd> <pfalsa> |
	ident <pos_ident> |
	begin <comandos> end |
	repeat <comandos> until <condicao>
19b. <pos_ident> ::= := <expressao> | <lista_arg>
20. <condicao> ::= <expressao> <relacao> <expressao>
21. <relacao> ::= = | <> | >= | <= | > | <
22. <expressao> ::= <termo> <outros_termos>
23. <op_un> ::= + | - | λ
24. <outros_termos> ::= <op_ad> <termo> <outros_termos> | λ
25. <op_ad> ::= + | -
26. <termo> ::= <op_un> <fator> <mais_fatores>
27. <mais_fatores> ::= <op_mul> <fator> <mais_fatores> | λ
28. <op_mul> ::= * | /
29. <fator> ::= ident | numero_int | numero_real | ( <expressao> )
