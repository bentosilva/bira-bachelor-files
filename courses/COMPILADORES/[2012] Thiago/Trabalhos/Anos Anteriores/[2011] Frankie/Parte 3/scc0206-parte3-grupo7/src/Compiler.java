/* Generated By:JavaCC: Do not edit this line. Compiler.java */
        public class Compiler implements CompilerConstants {
                Integer npar;
                Integer classetransf;
                String tipo_v;
                Integer nivelcorr;
                String c_id;
                Integer p_id;
                Integer pos;
                descritor desc;
                Integer num;
                Termos termoGlobal;
                TS ts;

                Compiler(){
                        this(System.in,null);
                        desc = new descritor();
                        npar = null;
                        classetransf=null;
                        num=0;
                        tipo_v=null;
                        nivelcorr=0;
                        pos = 0;
                        c_id=null;
                        p_id=0;
                        ts = new TS();
                        termoGlobal = new Termos();


                }

                public void RS(Integer i)
                {
                        switch(i){

                                case 3:
                                        if (ts.declarado(token.image.toString(),nivelcorr))
                                                System.out.println("Erro! Identificador j\u221a\u00b0 declarado na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                        else
                                                ts.insere(token.image);
                                        break;
                                case 4:
                                        ts.setaAtributos(nivelcorr,"var",tipo_v);
                                        break;
                                case 5:
                                        if (ts.declarado(token.image.toString(),nivelcorr))
                                                System.out.println("Erro! Identificador j\u221a\u00b0 declarado na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                        else {
                                                ts.insere(token.image);
                                                ts.setaAtributos(nivelcorr++,"proc",null);
                                                npar=0;
                                        }
                                        break;
                                case 8:
                                        ts.elimina(nivelcorr--,pos);
                                        break;
                                case 9:
                                        desc = ts.busca(token.image.toString());
                                        if ( (desc.achou==false) || ( desc.achou==true && ts.obtemAtributosCat(desc.ender)!="tipo"))
                                                System.out.println("Erro! Tipo n\u221a\u00a3o definido na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                        else
                                                tipo_v=ts.obtemAtributosTipoVar(desc.ender);
                                        break;
                                case 13:
                                        pos = ts.size();
                                        break;
                                case 14:
                                        classetransf=0; // 0 pra valor 1 pra referência
                                        break;
                                case 15:
                                        classetransf=1; //0 para valor 1 para referência
                                        break;
                                case 18:
                                        if (ts.declarado(token.image.toString(),nivelcorr))
                                                System.out.println("Erro! Identificador j\u221a\u00b0 declarado na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                        else {
                                                ts.insere(token.image);
                                                ts.setaAtributos(nivelcorr,"par",null);
                                                npar++;
                                        }
                                        break;
                                case 19: ts.setaAtributos(tipo_v);
                                                                 break;
                                case 20:
                                                                 ts.setaAtributos(pos,npar);
                                                                 npar=0;
                                                                 break;
                                case 21:
                                                                 desc = ts.busca(token.image.toString());
                                                                 if (!desc.achou)
                                                                         System.out.println("Erro! Identificador n\u221a\u00a3o declarado na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                                                 else{
                                                                         c_id=ts.obtemAtributosCat(desc.ender);
                                                                         p_id=desc.ender;
                                                                 }
                                                                 break;
                                case 22:
                                                                 if ( c_id!="proc" && c_id!="var" && c_id!="par" && c_id!="const" )
                                                                         System.out.println("Erro! Categoria n\u221a\u00a3o definida na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                                                 break;
                                case 23:
                                                                 npar++;
                                                                 break;
                                case 24:
                                                                 if (ts.obtemAtributosCat(p_id).contentEquals("proc"))
                                                                         if (ts.obtemAtributosNPar(pos)!=npar)
                                                                                 System.out.println("Erro! N\u221a\u222bmero errado de par\u221a\u00a2metros para o procedimento na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                                                 npar=0;
                                                                 break;
                                case 25:
                                                                 if ( c_id!="proc" && c_id!="var"  && c_id!="par" )
                                                                         System.out.println("Erro! Categoria n\u221a\u00a3o definida na linha "+token.beginLine+",coluna "+token.beginColumn+".");
                                                                 break;
                                case 26:
                                                                 num = Integer.parseInt(token.image);
                                                                 break;

                                default:break;
                        }
                        //ts.imprimeTS();
                }


                //Checagem de termos
                public String checaTermo(Termos t) {

                        int end1 = ts.busca(t.get1()).ender;
                        int end2 = ts.busca(t.get2()).ender;

                        if (end1==-1 || end2==-1) {//se fator ::= <NUM>
                                return "int";
                        }
                        if (t.getS() == "*" || t.getS() == "div") {
                                if (ts.obtemAtributosTipoVar(end1) != ts.obtemAtributosTipoVar(end2) || ts.obtemAtributosTipoVar(end1) != "int" || ts.obtemAtributosTipoVar(end2) != "int") {
                                        System.out.println("Incompatibilidade de tipos na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                                }
                                return "int";
                        }
                        if (t.getS() == "and") {
                                if (ts.obtemAtributosTipoVar(end1) != ts.obtemAtributosTipoVar(end2) || ts.obtemAtributosTipoVar(end1) != "boolean" || ts.obtemAtributosTipoVar(end2) != "boolean") {
                                        System.out.println("Incompatibilidade de tipos na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                                }
                                return "boolean";
                        }
                        return null;
                }

                //Checagem de fator
                public void checaFator(String t){
                        if (ts.obtemAtributosTipoVar(ts.busca(t).ender)!="boolean")
                                System.out.println("Erro! Valor n\u221a\u00a3o booleano na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                }

                //Checagem de expressoes simples
                public String checaExpS(Termos t) {

                        int end1 = ts.busca(t.get1()).ender;

                        if (end1 == -1) //se fator::= <NUM>
                                return "int";

                        if (t.get2()!=null){
                                int end2 = ts.busca(t.get2()).ender;
                                if (end2 == -1) //se fator::= <NUM>
                                        return "int";

                                if (t.getS() == "+" || t.getS() == "-") {
                                        if (ts.obtemAtributosTipoVar(end1) != ts.obtemAtributosTipoVar(end2) || ts.obtemAtributosTipoVar(end1) != "int" || ts.obtemAtributosTipoVar(end2) != "int") {
                                                System.out.println("Incompatibilidade de tipos na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                                        }
                                        return "int";
                                }
                                if (t.getS() == "or") {
                                        if (ts.obtemAtributosTipoVar(end1) != ts.obtemAtributosTipoVar(end2) || ts.obtemAtributosTipoVar(end1) != "boolean" || ts.obtemAtributosTipoVar(end2) != "boolean") {
                                                System.out.println("Incompatibilidade de tipos na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                                        }
                                        return "boolean";
                                }
                        }
                        if (t.get2()==null)
                                return ts.obtemAtributosTipoVar(end1);
                        return null;
                }

                //Checa expressoes
                public String checaExp(Termos t) {

                        int end1 = ts.busca(t.get1()).ender;

                        if (end1 == -1) //se fator::= <NUM>
                                return "int";

                        if ( t.get2()!=null) {
                                int end2 = ts.busca(t.get2()).ender;

                                if (end2 == -1) //se fator::= <NUM>
                                        return "int";

                                if (t.getS() == "<" || t.getS() == "<=" || t.getS() == ">" || t.getS() == ">=" ) {
                                        if (ts.obtemAtributosTipoVar(end1) != ts.obtemAtributosTipoVar(end2) || ts.obtemAtributosTipoVar(end1) != "int" || ts.obtemAtributosTipoVar(end2) != "int") {
                                                System.out.println("Incompatibilidade de tipos na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                                        }
                                }
                                if (t.getS() == "=" || t.getS() == "<>") {
                                        if (ts.obtemAtributosTipoVar(end1) != ts.obtemAtributosTipoVar(end2) ) {
                                                System.out.println("Incompatibilidade de tipos na linha " + token.beginLine + ",coluna " + token.beginColumn + ".");
                                        }
                                }
                                return "boolean";
                        }
                        if (t.get2()==null)
                                return checaExpS(termoGlobal);
                        return null;
                }



                public static void main(String[] args){
                        Compiler compiler = new Compiler();
                        while(true){
                                try {
                                        //parser.parser();
                                        compiler.Programa();
                                } catch (ParseException ex) {

                                        System.out.println(ex.getMessage());
                                        System.exit(-1);

                                } catch (TokenMgrError ex) {
                                        System.out.println(ex.getMessage());
                                        System.exit(-1);
                                }
                        }
                }

/* Compiler */
  final public void parser() throws ParseException, TokenMgrError, ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROGRAM:
      t = jj_consume_token(PROGRAM);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"PROGRAM | "+t.toString());
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"BOOLEAN | "+t.toString());
      break;
    case INT:
      t = jj_consume_token(INT);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"INT | "+t.toString());
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"PROCEDURE | "+t.toString());
      break;
    case VAR:
      t = jj_consume_token(VAR);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"VAR | "+t.toString());
      break;
    case BEGIN:
      /* Identificadores
      			 t=<READ>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"READ | "+t.toString()); } |
      			 t=<WRITE>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"WRITE | "+t.toString()); } |
      			 t=<TRUE>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"TRUE | "+t.toString()); } |
      			 t=<FALSE>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"FALSE | "+t.toString());} | */
                      t = jj_consume_token(BEGIN);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"BEGIN | "+t.toString());
      break;
    case END:
      t = jj_consume_token(END);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"END | "+t.toString());
      break;
    case IF:
      t = jj_consume_token(IF);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"IF | "+t.toString());
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"ELSE | "+t.toString());
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"WHILE | "+t.toString());
      break;
    case AND:
      t = jj_consume_token(AND);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"AND | "+t.toString());
      break;
    case OR:
      t = jj_consume_token(OR);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"OR | "+t.toString());
      break;
    case DIV:
      t = jj_consume_token(DIV);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"DIV | "+t.toString());
      break;
    case NOT:
      t = jj_consume_token(NOT);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NOT | "+t.toString());
      break;
    case GREATER:
      /* Simbolos */
                      t = jj_consume_token(GREATER);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"GREATER | "+t.toString());
      break;
    case GREATEREQ:
      t = jj_consume_token(GREATEREQ);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"GREATEREQ | "+t.toString());
      break;
    case NOTEQUAL:
      t = jj_consume_token(NOTEQUAL);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NOTEQUAL | "+t.toString());
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"EQUAL | "+t.toString());
      break;
    case LESSER:
      t = jj_consume_token(LESSER);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"LESSER | "+t.toString());
      break;
    case LESSEREQ:
      t = jj_consume_token(LESSEREQ);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"LESSEREQ | "+t.toString());
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"PLUS | "+t.toString());
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"MINUS | "+t.toString());
      break;
    case STAR:
      t = jj_consume_token(STAR);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"STAR | "+t.toString());
      break;
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"SEMICOLON | "+t.toString());
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"COMMA | "+t.toString());
      break;
    case DOT:
      t = jj_consume_token(DOT);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"DOT | "+t.toString());
      break;
    case LPAR:
      t = jj_consume_token(LPAR);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"LPAR | "+t.toString());
      break;
    case RPAR:
      t = jj_consume_token(RPAR);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"RPAR | "+t.toString());
      break;
    case ASSIGNMENT:
      t = jj_consume_token(ASSIGNMENT);
                                 System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"ASSIGMENT | "+t.toString());
      break;
    case COLON:
      t = jj_consume_token(COLON);
                                 System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"COLON | "+t.toString());
      break;
    case UNION:
      /*Extens�o grupo */
                      t = jj_consume_token(UNION);
                                         System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"UNION | "+t.toString());
      break;
    case NUMBER:
      /* Inteiros */
                      t = jj_consume_token(NUMBER);
                        try{

                                int size = Integer.parseInt(t.toString());

                                if(size < 32767) System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NUMBER | "+t.toString());

                                else {if (true) throw new NumberFormatException();}
                        }
                        catch (NumberFormatException e){

                                System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NUMBER "+t.toString()+" \u00d4\u00f8\u03a9 maior do que o permitido (32767)");

                        }
      break;
    case ID:
      /* Identificadores */
              t = jj_consume_token(ID);
                if(t.endColumn - t.beginColumn < 33) System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"ID |"+t.toString());
                else System.out.println("@("+t.beginLine+","+t.beginColumn+")"+" : ID "+t.toString()+" \u00d4\u00f8\u03a9 maior do que o permitido (32 caracteres)");
      break;
    case 0:
      t = jj_consume_token(0);
                                  System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Programa() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    Bloco();
    jj_consume_token(DOT);
    jj_consume_token(0);
  }

  final public void Bloco() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case UNION:
      ParteDeDeclaracoesDeVariaveis();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      ParteDeDeclaracoesDeProcedimentos();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    ComandoComposto();
  }

  final public void ParteDeDeclaracoesDeVariaveis() throws ParseException {
    label_1:
    while (true) {
      Declaration();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case UNION:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
  }

  final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
      DeclarationSpecifiers();
      DeclaratorList();
                                                   this.RS(4);
      break;
    case UNION:
      jj_consume_token(UNION);
                                                                             this.RS(9);
      jj_consume_token(ID);
      jj_consume_token(BEGIN);
      ParteDeDeclaracoesDeVariaveis();
      jj_consume_token(END);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeclarationSpecifiers() throws ParseException {
    TypeSpecifier();
  }

  final public void TypeSpecifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                     this.RS(9);
      break;
    case INT:
      jj_consume_token(INT);
                                           this.RS(9);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Lista de var
  final public void DeclaratorList() throws ParseException {
    jj_consume_token(ID);
               this.RS(3);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
                                            this.RS(3);
    }
  }

//Lista de parâmetros de READ
  final public void DeclaratorList2() throws ParseException {
    jj_consume_token(ID);
               this.RS(21);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
                                             this.RS(21);
    }
  }

//Lista de parâmetros de procedimento
  final public void DeclaratorList3() throws ParseException {
    jj_consume_token(ID);
               this.RS(18);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
                                             this.RS(18);
    }
  }

  final public void ParteDeDeclaracoesDeProcedimentos() throws ParseException {
    label_5:
    while (true) {
      DeclaracaoDeProcedimento();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
    }
  }

  final public void DeclaracaoDeProcedimento() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(ID);
                            this.RS(5);
                                           this.RS(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      ParametrosFormais();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    Bloco();
                                                    this.RS(8);
  }

  final public void ParametrosFormais() throws ParseException {
    jj_consume_token(LPAR);
    SecaoDeParametrosFormais();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      jj_consume_token(SEMICOLON);
      SecaoDeParametrosFormais();
    }
    jj_consume_token(RPAR);
                                                                                            this.RS(20);
  }

  final public void SecaoDeParametrosFormais() throws ParseException {
          this.RS(14);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    DeclaratorList3();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
      TypeSpecifier();
      break;
    case UNION:
      jj_consume_token(UNION);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                          this.RS(19);
  }

  final public void ComandoComposto() throws ParseException {
    jj_consume_token(BEGIN);
    Comando();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(SEMICOLON);
      Comando();
    }
    jj_consume_token(END);
  }

  final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
      jj_consume_token(READ);
      jj_consume_token(LPAR);
      DeclaratorList2();
      jj_consume_token(RPAR);
      break;
    case WRITE:
      jj_consume_token(WRITE);
      jj_consume_token(LPAR);
      Expressao();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        Expressao();
      }
      jj_consume_token(RPAR);
      break;
    case ID:
      jj_consume_token(ID);
      TipoComando();
      break;
    case BEGIN:
      ComandoComposto();
      break;
    case IF:
      ComandoCondicional1();
      break;
    case WHILE:
      ComandoRepetitivo1();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TipoComando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ASSIGNMENT:
          Termos termo = new Termos();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        jj_consume_token(DOT);
        jj_consume_token(ID);
                    this.RS(21);
      }
                                     this.RS(21);
                                                     this.RS(25);
                if (this.ts.busca(token.image).ender != -1)
                        termo.set1(this.ts.obtemAtributosTipoVar(this.ts.busca(token.image).ender));
      jj_consume_token(ASSIGNMENT);
      Expressao();
                        if (termo.get1()==null //se <ID> não declarado
                                        || termo.get1()!=checaExp(termoGlobal)  )
                                System.out.println("Erro! Atribui\u221a\u00df\u221a\u00a3o inv\u221a\u00b0lida na linha "+ token.beginLine+", coluna"+token.beginColumn);
                        this.RS(22);
      break;
    default:
      jj_la1[19] = jj_gen;
                   this.RS(21);
                                   this.RS(25);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        ListaDeExpressoes();
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
                                                                                    this.RS(24);
    }
  }

  final public void ComandoCondicional1() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    Expressao();
                                 if (!checaExp(termoGlobal).contentEquals("boolean")) System.out.println("Erro! Express\u221a\u00a3o n\u221a\u00a3o booleana na linha "+ token.beginLine+",coluna "+token.beginColumn);
    jj_consume_token(RPAR);
    Comando();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Comando();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void ComandoRepetitivo1() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAR);
    Expressao();
                                     if (!checaExp(termoGlobal).contentEquals("boolean")) System.out.println("Erro! Express\u221a\u00a3o n\u221a\u00a3o booleana na linha "+ token.beginLine+",coluna "+token.beginColumn);
    jj_consume_token(RPAR);
    Comando();
  }

  final public void Expressao() throws ParseException {
         Termos termo = new Termos();
    ExpressaoSimples();
                             termo.set1(token.image); checaExp(termo); termoGlobal=termo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER:
    case GREATEREQ:
    case NOTEQUAL:
    case EQUAL:
    case LESSER:
    case LESSEREQ:
      Relacao();
                                                                                                       termo.setS(token.image);
      ExpressaoSimples();
                                                                                                                                                      termo.set2(token.image); checaExp(termo); termoGlobal=termo;
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void Relacao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    case LESSER:
      jj_consume_token(LESSER);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      break;
    case LESSEREQ:
      jj_consume_token(LESSEREQ);
      break;
    case GREATEREQ:
      jj_consume_token(GREATEREQ);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressaoSimples() throws ParseException {
         Termos termo = new Termos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    Termo();
                                   termo.set1(token.image); termoGlobal=termo;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                           termo.setS(token.image);
      Termo();
                                                                                                                                              termo.set2(token.image); this.checaExpS(termo);termoGlobal=termo; termoGlobal=termo;
    }
  }

  final public void Termo() throws ParseException {
         Termos termo = new Termos();
    Fator();
                  termo.set1(token.image);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case AND:
      case STAR:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                   termo.setS(token.image);
      Fator();
                                                                                                      termo.set2(token.image); checaTermo(termo);
    }
  }

  final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Variavel();
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
                                this.RS(26);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      Expressao();
      jj_consume_token(RPAR);
      break;
    case NOT:
      jj_consume_token(NOT);
      Fator();
                                                                                            checaFator(token.image);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variavel() throws ParseException {
    jj_consume_token(ID);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(DOT);
      jj_consume_token(ID);
                           this.RS(21);
    }
                                              this.RS(21);
  }

  final public void ListaDeExpressoes() throws ParseException {
    Expressao();
                     this.RS(23);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      Expressao();
                                                          this.RS(23);
    }
  }

  final public void ListaDeExpressoes1() throws ParseException {
    Expressao();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      Expressao();
    }
  }

  /** Generated Token Manager. */
  public CompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff81,0x300,0x400,0x300,0x300,0x300,0x80000000,0x80000000,0x80000000,0x400,0x0,0x40000000,0x800,0x300,0x40000000,0x80000000,0x15000,0x0,0x0,0x0,0x8000,0x7e00000,0x7e00000,0x18000000,0x18000000,0x18020000,0x18020000,0x20140000,0x20140000,0x80000,0x0,0x80000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x125f,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x40,0x0,0x0,0x1c00,0x1,0x2,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1202,0x1,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Compiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compiler(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
