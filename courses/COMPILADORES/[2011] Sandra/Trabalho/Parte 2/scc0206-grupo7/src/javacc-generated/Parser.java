/* Generated By:JavaCC: Do not edit this line. Parser.java */
        public class Parser implements ParserConstants {

                public static void main(String[] args){

                        Parser parser = new Parser(System.in);

                        boolean maxIdentifier = false;
                        boolean maxInt = false;


                        while(true){

                                try {
//					  parser.parser();
                                          parser.Programa();
                                } catch (ParseException ex) {

                                        System.out.println(ex.getMessage());
                                        System.exit(-1);

                                } catch (TokenMgrError ex) {
                                        System.out.println(ex.getMessage());
                                        System.exit(-1);
                                }
                }
        }

/* Parser */
  static final public void parser() throws ParseException, TokenMgrError, ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROGRAM:
      t = jj_consume_token(PROGRAM);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"PROGRAM | "+t.toString());
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"BOOLEAN | "+t.toString());
      break;
    case INT:
      t = jj_consume_token(INT);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"INT | "+t.toString());
      break;
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"PROCEDURE | "+t.toString());
      break;
    case VAR:
      t = jj_consume_token(VAR);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"VAR | "+t.toString());
      break;
    case BEGIN:
      /* Identificadores
      		t=<READ>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"READ | "+t.toString()); } |
      		t=<WRITE>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"WRITE | "+t.toString()); } |
      		t=<TRUE>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"TRUE | "+t.toString()); } |
      		t=<FALSE>		{ System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"FALSE | "+t.toString());} | */
                      t = jj_consume_token(BEGIN);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"BEGIN | "+t.toString());
      break;
    case END:
      t = jj_consume_token(END);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"END | "+t.toString());
      break;
    case IF:
      t = jj_consume_token(IF);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"IF | "+t.toString());
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"ELSE | "+t.toString());
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"WHILE | "+t.toString());
      break;
    case AND:
      t = jj_consume_token(AND);
                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"AND | "+t.toString());
      break;
    case OR:
      t = jj_consume_token(OR);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"OR | "+t.toString());
      break;
    case DIV:
      t = jj_consume_token(DIV);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"DIV | "+t.toString());
      break;
    case NOT:
      t = jj_consume_token(NOT);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NOT | "+t.toString());
      break;
    case GREATER:
      /* Simbolos */
                      t = jj_consume_token(GREATER);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"GREATER | "+t.toString());
      break;
    case GREATEREQ:
      t = jj_consume_token(GREATEREQ);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"GREATEREQ | "+t.toString());
      break;
    case NOTEQUAL:
      t = jj_consume_token(NOTEQUAL);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NOTEQUAL | "+t.toString());
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"EQUAL | "+t.toString());
      break;
    case LESSER:
      t = jj_consume_token(LESSER);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"LESSER | "+t.toString());
      break;
    case LESSEREQ:
      t = jj_consume_token(LESSEREQ);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"LESSEREQ | "+t.toString());
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"PLUS | "+t.toString());
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"MINUS | "+t.toString());
      break;
    case STAR:
      t = jj_consume_token(STAR);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"STAR | "+t.toString());
      break;
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"SEMICOLON | "+t.toString());
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"COMMA | "+t.toString());
      break;
    case DOT:
      t = jj_consume_token(DOT);
                                  System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"DOT | "+t.toString());
      break;
    case LPAR:
      t = jj_consume_token(LPAR);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"LPAR | "+t.toString());
      break;
    case RPAR:
      t = jj_consume_token(RPAR);
                                          System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"RPAR | "+t.toString());
      break;
    case ASSIGNMENT:
      t = jj_consume_token(ASSIGNMENT);
                                 System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"ASSIGMENT | "+t.toString());
      break;
    case COLON:
      t = jj_consume_token(COLON);
                                 System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"COLON | "+t.toString());
      break;
    case UNION:
      /*Extens‹o grupo */
                      t = jj_consume_token(UNION);
                                         System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"UNION | "+t.toString());
      break;
    case NUMBER:
      /* Inteiros */
                      t = jj_consume_token(NUMBER);
                        try{

                                int size = Integer.parseInt(t.toString());

                                if(size < 32767) System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NUMBER | "+t.toString());

                                else {if (true) throw new NumberFormatException();}
                        }
                        catch (NumberFormatException e){

                        System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"NUMBER "+t.toString()+" \u00e9 maior do que o permitido (32767)");

                        }
      break;
    case ID:
      /* Identificadores */
                      t = jj_consume_token(ID);
                                if(t.endColumn - t.beginColumn < 33) System.out.println("@("+t.beginLine+","+t.beginColumn+") "+"ID |"+t.toString());
                                else System.out.println("@("+t.beginLine+","+t.beginColumn+")"+" : ID "+t.toString()+" \u00e9 maior do que o permitido (32 caracteres)");
      break;
    case 0:
      jj_consume_token(0);
                                          System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Programa() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    Bloco();
    jj_consume_token(DOT);
    jj_consume_token(0);
  }

  static final public void Bloco() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case UNION:
      ParteDeDeclaracoesDeVariaveis();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      ParteDeDeclaracoesDeProcedimentos();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    ComandoComposto();
  }

  static final public void ParteDeDeclaracoesDeVariaveis() throws ParseException {
    label_1:
    while (true) {
      Declaration();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INT:
      case UNION:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
      DeclarationSpecifiers();
      DeclaratorList();
      break;
    case UNION:
      jj_consume_token(UNION);
      jj_consume_token(ID);
      jj_consume_token(BEGIN);
      ParteDeDeclaracoesDeVariaveis();
      jj_consume_token(END);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclarationSpecifiers() throws ParseException {
    TypeSpecifier();
  }

  static final public void TypeSpecifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclaratorList() throws ParseException {
    jj_consume_token(ID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
  }

  static final public void ParteDeDeclaracoesDeProcedimentos() throws ParseException {
    label_3:
    while (true) {
      DeclaracaoDeProcedimento();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
  }

  static final public void DeclaracaoDeProcedimento() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      ParametrosFormais();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    Bloco();
  }

  static final public void ParametrosFormais() throws ParseException {
    jj_consume_token(LPAR);
    SecaoDeParametrosFormais();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(SEMICOLON);
      SecaoDeParametrosFormais();
    }
    jj_consume_token(RPAR);
  }

  static final public void SecaoDeParametrosFormais() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    DeclaratorList();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
      TypeSpecifier();
      break;
    case UNION:
      jj_consume_token(UNION);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ComandoComposto() throws ParseException {
    jj_consume_token(BEGIN);
    Comando();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(SEMICOLON);
      Comando();
    }
    jj_consume_token(END);
  }

  static final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      TipoComando();
      break;
    case BEGIN:
      ComandoComposto();
      break;
    case IF:
      ComandoCondicional1();
      break;
    case WHILE:
      ComandoRepetitivo1();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//código alterado para tratar procedimento pré-definido write('string')
  static final public void TipoComando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case ASSIGNMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(ID);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGNMENT);
      Expressao();
      break;
    default:
      jj_la1[16] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        ListaDeExpressoes();
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    }
  }

  static final public void ComandoCondicional1() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    Expressao();
    jj_consume_token(RPAR);
    Comando();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Comando();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void ComandoRepetitivo1() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAR);
    Expressao();
    jj_consume_token(RPAR);
    Comando();
  }

  static final public void Expressao() throws ParseException {
    ExpressaoSimples();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER:
    case GREATEREQ:
    case NOTEQUAL:
    case EQUAL:
    case LESSER:
    case LESSEREQ:
      Relacao();
      ExpressaoSimples();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void Relacao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    case LESSER:
      jj_consume_token(LESSER);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      break;
    case LESSEREQ:
      jj_consume_token(LESSEREQ);
      break;
    case GREATEREQ:
      jj_consume_token(GREATEREQ);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressaoSimples() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    Termo();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Termo();
    }
  }

  static final public void Termo() throws ParseException {
    Fator();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case AND:
      case STAR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Fator();
    }
  }

  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Variavel();
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      Expressao();
      jj_consume_token(RPAR);
      break;
    case NOT:
      jj_consume_token(NOT);
      Fator();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Variavel() throws ParseException {
    jj_consume_token(ID);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      jj_consume_token(DOT);
      jj_consume_token(ID);
    }
  }

  static final public void ListaDeExpressoes() throws ParseException {
    Expressao();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      Expressao();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff81,0x300,0x400,0x300,0x300,0x300,0x80000000,0x400,0x0,0x40000000,0x800,0x300,0x40000000,0x15000,0x0,0x0,0x0,0x8000,0x7e00000,0x7e00000,0x18000000,0x18000000,0x18020000,0x18020000,0x20140000,0x20140000,0x80000,0x0,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x65f,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x2,0x0,0x0,0x40,0x0,0x400,0x1,0x2,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x602,0x1,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
